<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Drunken Coder Blog</title>
    <atom:link href="http://blog.jetboystudio.com/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://blog.jetboystudio.com</link>
    <description>you can do it well, even if you&#x27;re drunk</description>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>

	    <item>
	    	<title>Humble Bundle in Emulator</title>
	    	<link>http://blog.jetboystudio.com/articles/humble-bundle-mobile-in-desktop/</link>
	    	<guid isPermaLink="true">http://blog.jetboystudio.com/articles/humble-bundle-mobile-in-desktop/</guid>
	    	<pubDate>Mon, 17 Mar 2014 16:29:00 -0700</pubDate>
	    	<author></author>
	    	<description>&lt;p&gt;I have a bunch of &lt;a href=&quot;https://www.humblebundle.com/&quot;&gt;Humble Bundle&lt;/a&gt; Android games that I wanted to play on our house entertainment computer (hooked up to a projector!) Here is how I did it. This is also a guide if you want a really fast &amp;amp; performant Android emulator.&lt;/p&gt;
&lt;p&gt;This may not be useful for gaming, actually, as many games wouldn’t run/install which might be “Intel Atom x86” CPU type (which is needed by accelerated emulator.) I have an Ouya, so I might end up just using that, even though I was trying avoid having to switch cables. For the games that did work, I didn’t bother installing a controller, but that would probably greatly improve overall experience.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install the &lt;a href=&quot;http://developer.android.com/sdk/index.html&quot;&gt;Android SDK&lt;/a&gt;. I put it in ~/bin/android-sdk-macosx/ and added ~/bin/android-sdk-macosx/tools to my path.  This is for mac, but should apply to whatever you use.&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;android&lt;/code&gt;. Install “Android SDK Tools”, one of the Android packs (I did “Android 4.4.2”), and “Intel x86 Emulator Accelerator (HAXM)”&lt;/li&gt;
&lt;li&gt;Exit when it completes, and run &lt;code&gt;android avd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Make a new AVD called “Nexus10” and set “Device” to “Nexus 10”, CPU to “Intel Atom x86”, check “Hardware keyboard present”, set it to “No skin” and check “Use Host GPU”&lt;/li&gt;
&lt;li&gt;Exit AVDManager&lt;/li&gt;
&lt;li&gt;Install the &lt;a href=&quot;http://software.intel.com/en-us/android/articles/intel-hardware-accelerated-execution-manager&quot;&gt;Intel HAXM patch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;LD_LIBRARY_PATH=~/bin/android-sdk-macosx/tools/lib/ ~/bin/android-sdk-macosx/tools/emulator64-x86 -avd Nexus10&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Download &lt;a href=&quot;https://www.humblebundle.com/getapp&quot;&gt;Humble Bundle app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Install with &lt;code&gt;adb install ~/Downloads/HumbleBundle-1.6.2.apk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Login &amp;amp; install whatever you like!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are the games I tried, that seemed to run full speed!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gunslugs (good keyboard support)&lt;/li&gt;
&lt;li&gt;Kareteka Classic (weird with on-screen controls)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These had issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BADLAND Premium (crashed on run)&lt;/li&gt;
&lt;li&gt;Bloons TD 5 (crashed on run)&lt;/li&gt;
&lt;li&gt;Funky Smugglers (crashed on run)&lt;/li&gt;
&lt;li&gt;Vector (crashed on run)&lt;/li&gt;
&lt;li&gt;Punch Quest (crashed on run)&lt;/li&gt;
&lt;li&gt;Jack Lumber (wouldn’t install)&lt;/li&gt;
&lt;li&gt;Hero Academy (wouldn’t install)&lt;/li&gt;
&lt;li&gt;Kingdom Rush (wouldn’t install)&lt;/li&gt;
&lt;li&gt;Ravensword: Shadowlands (crashed on run)&lt;/li&gt;
&lt;li&gt;Swords &amp;amp; Soldiers HD (crashed on run)&lt;/li&gt;
&lt;li&gt;Bard’s Tale (installed, anddownloaded content,then crashed)&lt;/li&gt;
&lt;li&gt;Breach &amp;amp; Clear (crashed on run)&lt;/li&gt;
&lt;/ul&gt;
</description>
		</item>

	    <item>
	    	<title>Music player in Angular.js</title>
	    	<link>http://blog.jetboystudio.com/articles/angular-music-player/</link>
	    	<guid isPermaLink="true">http://blog.jetboystudio.com/articles/angular-music-player/</guid>
	    	<pubDate>Sat, 30 Nov 2013 06:52:00 -0800</pubDate>
	    	<author></author>
	    	<description>&lt;p&gt;Here I will teach you to make an Angular app that plays music, with reusable components that are packaged in single directories.  This will allow you to use the same audio controller in multiple apps, even if ou aren’t paying attention (drunk.)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This is a complete client-side app.&lt;/p&gt;
&lt;h2 id=&quot;application-design&quot;&gt;Application Design&lt;/h2&gt;
&lt;p&gt;The basic idea is that we have an file store of our MP3 files, and a JSON file with music data in it.&lt;/p&gt;
&lt;p&gt;I want a player that features a scrolling list of album-covers, and let’s you hit next or play button. I generated my data from echonest. Eventually, this could come from a REST API, or rdio, or something, but for now, let’s keep it simple.&lt;/p&gt;
&lt;p&gt;I want to make a player component, that listens for events, triggers play/pause, and has a player UI.  This will allow me to use the player in other applications. I want all the files for this component to be in &lt;code&gt;app/scripts/components/audioPlayer/&lt;/code&gt;, so that I can simply drag&amp;amp;drop it into new projects.&lt;/p&gt;
&lt;p&gt;To get started fast, I am just going to use bootstrap stuff for UI, which will make it easy to customize the UI, later, but look pretty good, by default.&lt;/p&gt;
&lt;p&gt;Feel free to organize your files in whatever way makes sense. If you don’t care about components being lil plugins, put them in scripts/styles/etc.&lt;/p&gt;
&lt;p&gt;You may also want to use an &lt;a href=&quot;http://mediaelementjs.com/&quot;&gt;audio element fallback&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;yo-&quot;&gt;Yo!&lt;/h2&gt;
&lt;p&gt;I am using yeoman to get started fast. The angular-generator includes bootstrap boilerplate code and a quick start. I don’t 100% agree with dude’s choices, but I am a lazy man. You can use grunt to build a compiled version, run a static-webserver, run testing suite, and much more! You will need npm &amp;amp; node installed.&lt;/p&gt;
&lt;p&gt;Install yo &amp;amp; the angular-generator with this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo npm install -g yo generator-angular&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;make-a-new-project&quot;&gt;Make a new project&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;mkdir music_player
cd music_player
yo angular&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Answer yes, no, then enter. (use bootstrap, no scss, install all angular components)&lt;/p&gt;
&lt;p&gt;Now, start your local server with &lt;code&gt;grunt serve&lt;/code&gt;. You should see a cute bootstrap page with Mr Yeoman saying “Allo”.&lt;/p&gt;
&lt;p&gt;Any changes we make to the app will trigger a refresh. Sweet!&lt;/p&gt;
&lt;p&gt;I’m not using bootstrap’s javascript or jQuery, but it’s required by this generator to not get ugly errors in teh console:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bower install --save sass-bootstrap&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is probably a better angular-generator, but I ain’t got time for nothing but the basics, gangster rap &amp;amp; drinking cheap beer.&lt;/p&gt;
&lt;h2 id=&quot;component&quot;&gt;Component&lt;/h2&gt;
&lt;p&gt;Components are basically “extend HTML to have this new element that does all this cool shit I thought of.” We are going to make one called &lt;code&gt;&amp;lt;audio-player&amp;gt;&lt;/code&gt; that enables an app to have a cute lil playlist-player.&lt;/p&gt;
&lt;p&gt;Make &lt;code&gt;app/scripts/components/audioPlayer/&lt;/code&gt; look like this:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;component.js&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;angular.module(&lt;span class=&quot;string&quot;&gt;&#x27;audioPlayer-directive&#x27;&lt;/span&gt;, [])
    .directive(&lt;span class=&quot;string&quot;&gt;&#x27;audioPlayer&#x27;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;($rootScope)&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; {
            restrict: &lt;span class=&quot;string&quot;&gt;&#x27;E&#x27;&lt;/span&gt;,
            scope: {},
            controller: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;($scope, $element)&lt;/span&gt; {&lt;/span&gt;
                $scope.audio = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Audio();
                $scope.currentNum = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;

                &lt;span class=&quot;comment&quot;&gt;// tell others to give me my prev/next track (with audio.set message)&lt;/span&gt;
                $scope.next = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;{&lt;/span&gt; $rootScope.$broadcast(&lt;span class=&quot;string&quot;&gt;&#x27;audio.next&#x27;&lt;/span&gt;); };
                $scope.prev = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;{&lt;/span&gt; $rootScope.$broadcast(&lt;span class=&quot;string&quot;&gt;&#x27;audio.prev&#x27;&lt;/span&gt;); };

                &lt;span class=&quot;comment&quot;&gt;// tell audio element to play/pause, you can also use $scope.audio.play() or $scope.audio.pause();&lt;/span&gt;
                $scope.playpause = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;{&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = $scope.audio.paused ? $scope.audio.play() : $scope.audio.pause(); };

                &lt;span class=&quot;comment&quot;&gt;// listen for audio-element events, and broadcast stuff&lt;/span&gt;
                $scope.audio.addEventListener(&lt;span class=&quot;string&quot;&gt;&#x27;play&#x27;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;{&lt;/span&gt; $rootScope.$broadcast(&lt;span class=&quot;string&quot;&gt;&#x27;audio.play&#x27;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;); });
                $scope.audio.addEventListener(&lt;span class=&quot;string&quot;&gt;&#x27;pause&#x27;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;{&lt;/span&gt; $rootScope.$broadcast(&lt;span class=&quot;string&quot;&gt;&#x27;audio.pause&#x27;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;); });
                $scope.audio.addEventListener(&lt;span class=&quot;string&quot;&gt;&#x27;timeupdate&#x27;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;{&lt;/span&gt; $rootScope.$broadcast(&lt;span class=&quot;string&quot;&gt;&#x27;audio.time&#x27;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;); });
                $scope.audio.addEventListener(&lt;span class=&quot;string&quot;&gt;&#x27;ended&#x27;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;{&lt;/span&gt; $rootScope.$broadcast(&lt;span class=&quot;string&quot;&gt;&#x27;audio.ended&#x27;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;); $scope.next(); });

                &lt;span class=&quot;comment&quot;&gt;// set track &amp;amp; play it&lt;/span&gt;
                $rootScope.$on(&lt;span class=&quot;string&quot;&gt;&#x27;audio.set&#x27;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(r, file, info, currentNum, totalNum)&lt;/span&gt;{&lt;/span&gt;
                    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; playing = !$scope.audio.paused;
                    $scope.audio.src = file;
                    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = playing ? $scope.audio.play() : $scope.audio.pause();
                    $scope.info = info;
                    $scope.currentNum = currentNum;
                    $scope.totalNum = totalNum;
                });

                &lt;span class=&quot;comment&quot;&gt;// update display of things - makes time-scrub work&lt;/span&gt;
                setInterval(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;{&lt;/span&gt; $scope.$apply(); }, &lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;);
            },

            templateUrl: &lt;span class=&quot;string&quot;&gt;&#x27;/scripts/components/audioPlayer/views/component.html&#x27;&lt;/span&gt;
        };
    });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This gives our app an &lt;code&gt;&amp;lt;audio-player&amp;gt;&lt;/code&gt; tag that does the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;generate an audio element.&lt;/li&gt;
&lt;li&gt;has next/prev/playpause/play/pause exposed in &lt;code&gt;$scope&lt;/code&gt; of component&lt;/li&gt;
&lt;li&gt;broadcasts lots of messages on &lt;code&gt;$rootScope&lt;/code&gt; for other controllers/components to respond to and tell this component what to play&lt;/li&gt;
&lt;li&gt;responds to &lt;code&gt;audio.set&lt;/code&gt; broadcasts on &lt;code&gt;$rootScope&lt;/code&gt; to set the current audio file&lt;/li&gt;
&lt;li&gt;jump to next song when a track finishes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;views/component.html&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
    &amp;lt;label&amp;gt;volume: &amp;lt;input min=&amp;quot;0&amp;quot; max=&amp;quot;1&amp;quot; step=&amp;quot;0.01&amp;quot; type=&amp;quot;range&amp;quot; ng-model=&amp;quot;audio.volume&amp;quot; /&amp;gt;&amp;lt;/label&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
    &amp;lt;button ng-disabled=&amp;quot;currentNum == 0&amp;quot; class=&amp;quot;btn btn-default prev&amp;quot; ng-click=&amp;quot;prev()&amp;quot;&amp;gt;&amp;lt;i class=&amp;quot;glyphicon glyphicon-step-backward&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; prev&amp;lt;/button&amp;gt;
    &amp;lt;button class=&amp;quot;btn btn-default playpause&amp;quot; ng-click=&amp;quot;playpause()&amp;quot; ng-class=&amp;quot;{paused:audio.paused}&amp;quot;&amp;gt;
        &amp;lt;span class=&amp;quot;play-text&amp;quot;&amp;gt;&amp;lt;i class=&amp;quot;glyphicon glyphicon-play&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; play&amp;lt;/span&amp;gt;
        &amp;lt;span class=&amp;quot;pause-text&amp;quot;&amp;gt;&amp;lt;i class=&amp;quot;glyphicon glyphicon-pause&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; pause&amp;lt;/span&amp;gt;
    &amp;lt;/button&amp;gt;
    &amp;lt;button ng-disabled=&amp;quot;currentNum &amp;gt;= (totalNum-1)&amp;quot; class=&amp;quot;btn btn-default next&amp;quot; ng-click=&amp;quot;next()&amp;quot;&amp;gt;next &amp;lt;i class=&amp;quot;glyphicon glyphicon-step-forward&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div class=&amp;quot;form-group time&amp;quot;&amp;gt;
    &amp;lt;label&amp;gt;time: &amp;lt;input min=&amp;quot;0&amp;quot; max=&amp;quot;{{audio.duration}}&amp;quot; step=&amp;quot;0.01&amp;quot; type=&amp;quot;range&amp;quot; ng-model=&amp;quot;audio.currentTime&amp;quot; /&amp;gt;&amp;lt;/label&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div class=&amp;quot;form-group now-playing&amp;quot;&amp;gt;
    &amp;lt;p&amp;gt;Now Playing: &amp;lt;img width=&amp;quot;30&amp;quot; height=&amp;quot;30&amp;quot; src=&amp;quot;{{info.image}}&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;{{info.artist.name}} - {{info.title}}&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This gives us a prev/play&amp;amp;pause/next button, a volume control, a time-indicator/scrubber, and track-info. It’s all updated automatically when things change with the underlying audio element!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;component.css&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-css&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* minimal CSS to get started with component. feel free to override in main.css */&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;audio-player&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;.paused&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;.play-text&lt;/span&gt;,
&lt;span class=&quot;tag&quot;&gt;audio-player&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;.pause-text&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;{
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;inline-block&lt;/span&gt;&lt;/span&gt;;
&lt;span class=&quot;rule&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;audio-player&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;.play-text&lt;/span&gt;,
&lt;span class=&quot;tag&quot;&gt;audio-player&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;.paused&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;.pause-text&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;{
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;none&lt;/span&gt;&lt;/span&gt;;
&lt;span class=&quot;rule&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;audio-player&lt;/span&gt; * &lt;span class=&quot;rules&quot;&gt;{
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;-webkit-touch-callout&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; none&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;-webkit-user-select&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; none&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;-khtml-user-select&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; none&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;-moz-user-select&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; none&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;-ms-user-select&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; none&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;user-select&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; none&lt;/span&gt;&lt;/span&gt;;
&lt;span class=&quot;rule&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This makes our play/pause button swap out the text &amp;amp; icon correctly, using the &lt;code&gt;.paused&lt;/code&gt; class &amp;amp; disables user-select inside audio-player, so the buttons won’t trigger selection.&lt;/p&gt;
&lt;h2 id=&quot;using-our-new-awesome&quot;&gt;Using our new awesome&lt;/h2&gt;
&lt;p&gt;So, now we need to add stuff to our index.html &amp;amp; main controller. Look for the build comments in &lt;code&gt;app/index.html&lt;/code&gt;, and make the CSS one look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&amp;lt;!-- build:css({.tmp,app}) styles/main.css --&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;styles/bootstrap.css&amp;quot;&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;scripts/components/audioPlayer/component.css&amp;quot;&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;styles/main.css&amp;quot;&amp;gt;
&amp;lt;!-- endbuild --&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and find the JS module build stanza near the bottom, and make it look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&amp;lt;!-- build:js scripts/modules.js --&amp;gt;
&amp;lt;script src=&amp;quot;bower_components/angular-resource/angular-resource.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;bower_components/angular-cookies/angular-cookies.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;bower_components/angular-sanitize/angular-sanitize.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;bower_components/angular-route/angular-route.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;scripts/components/audioPlayer/component.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;!-- endbuild --&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This adds our CSS &amp;amp; javascript to the resources-tree. Next, we need to inform our app that it should use this new directive. edit &lt;code&gt;app/scripts/app.js&lt;/code&gt; to look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#x27;use strict&#x27;&lt;/span&gt;;

angular.module(&lt;span class=&quot;string&quot;&gt;&#x27;musicPlayerApp&#x27;&lt;/span&gt;, [
  &lt;span class=&quot;string&quot;&gt;&#x27;ngCookies&#x27;&lt;/span&gt;,
  &lt;span class=&quot;string&quot;&gt;&#x27;ngResource&#x27;&lt;/span&gt;,
  &lt;span class=&quot;string&quot;&gt;&#x27;ngSanitize&#x27;&lt;/span&gt;,
  &lt;span class=&quot;string&quot;&gt;&#x27;ngRoute&#x27;&lt;/span&gt;,
  &lt;span class=&quot;string&quot;&gt;&#x27;audioPlayer-directive&#x27;&lt;/span&gt;
])
  .config(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;($routeProvider)&lt;/span&gt; {&lt;/span&gt;
    $routeProvider
      .when(&lt;span class=&quot;string&quot;&gt;&#x27;/&#x27;&lt;/span&gt;, {
        templateUrl: &lt;span class=&quot;string&quot;&gt;&#x27;views/main.html&#x27;&lt;/span&gt;,
        controller: &lt;span class=&quot;string&quot;&gt;&#x27;MainCtrl&#x27;&lt;/span&gt;
      })
      .otherwise({
        redirectTo: &lt;span class=&quot;string&quot;&gt;&#x27;/&#x27;&lt;/span&gt;
      });
  });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I had some MP3 files in &lt;code&gt;app/mp3/&lt;/code&gt;, and ran the &lt;a href=&quot;https://github.com/echonest/echoprint-codegen&quot;&gt;echoprint tool&lt;/a&gt; on them. First I installed that in my path, then wrote a &lt;a href=&quot;https://github.com/konsumer/music_player/tree/master/fingerprinter&quot;&gt;lil node script&lt;/a&gt; (total overkill, related to a project) to do the work of making the list, which gets saved in &lt;code&gt;app/data/music.json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The data I am using is formatted like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-json&quot;&gt;[
    {
        &amp;quot;title&amp;quot;: &amp;quot;SONG TITLE&amp;quot;,
        &amp;quot;artist&amp;quot;: {&amp;quot;name&amp;quot;: ARTIST NAME&amp;quot;},
        &amp;quot;image&amp;quot;: &amp;quot;ALBUM COVER&amp;quot;,
        &amp;quot;file&amp;quot;: &amp;quot;MP3 FILE&amp;quot; // without location name
    }
]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will need to generate/create this file in &lt;code&gt;app/data/music.json&lt;/code&gt;, and it needs to represent your music collection.&lt;/p&gt;
&lt;p&gt;This, of course, should probably later come from a local REST service (couchdb has this built in!) that does the work of tracking your collection, or whatever.&lt;/p&gt;
&lt;h3 id=&quot;listing-albums&quot;&gt;Listing albums&lt;/h3&gt;
&lt;p&gt;In order to list albums, the basic idea is that we have a list of tracks, and we will show a window of records. In order to do this, we add a startFrom filter (limitTo already exists.) Our controller also needs to load the list of tracks and tell our new audio-player what the current file is and respond to prev/next broadcasts.  Here is how I modified my main controller (in &lt;code&gt;app/scripts/controllers/main.js&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#x27;use strict&#x27;&lt;/span&gt;;

angular.module(&lt;span class=&quot;string&quot;&gt;&#x27;musicPlayerApp&#x27;&lt;/span&gt;)
    .filter(&lt;span class=&quot;string&quot;&gt;&#x27;startFrom&#x27;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(input, start)&lt;/span&gt; {&lt;/span&gt;
            start = +start; &lt;span class=&quot;comment&quot;&gt;//parse to int&lt;/span&gt;
            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; input.slice(start);
        };
    })

    .controller(&lt;span class=&quot;string&quot;&gt;&#x27;MainCtrl&#x27;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;($scope, $http, $rootScope)&lt;/span&gt; {&lt;/span&gt;
        $scope.currentTrack = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;
        $scope.pageSize = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;
        $scope.data=[];

        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; updateTrack = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;{&lt;/span&gt;
            $rootScope.$broadcast(&lt;span class=&quot;string&quot;&gt;&#x27;audio.set&#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#x27;mp3/&#x27;&lt;/span&gt; + $scope.data[$scope.currentTrack].file, $scope.data[$scope.currentTrack], $scope.currentTrack, $scope.data.length);
        };

        $rootScope.$on(&lt;span class=&quot;string&quot;&gt;&#x27;audio.next&#x27;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;{&lt;/span&gt;
            $scope.currentTrack++;
            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ($scope.currentTrack &amp;lt; $scope.data.length){
                updateTrack();
            }&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;{
                $scope.currentTrack=$scope.data.length-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;
            }
        });

        $rootScope.$on(&lt;span class=&quot;string&quot;&gt;&#x27;audio.prev&#x27;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;{&lt;/span&gt;
            $scope.currentTrack--;
            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ($scope.currentTrack &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;){
                updateTrack();
            }&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;{
                $scope.currentTrack = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;
            }
        });

        $http.get(&lt;span class=&quot;string&quot;&gt;&#x27;data/music.json&#x27;&lt;/span&gt;)
            .success(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(response)&lt;/span&gt;{&lt;/span&gt;
                $scope.data = response;
                updateTrack();
            });
    });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Modify your &lt;code&gt;app/views/main.html&lt;/code&gt; to show the data-window as a ng-repeat &amp;amp; use the new audio-player:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;header class=&amp;quot;jumbotron&amp;quot;&amp;gt;
  &amp;lt;h1&amp;gt;&amp;#39;Allo, &amp;#39;Allo!&amp;lt;/h1&amp;gt;
  &amp;lt;p class=&amp;quot;lead&amp;quot;&amp;gt;
    &amp;lt;img src=&amp;quot;images/yeoman.png&amp;quot; alt=&amp;quot;I&amp;#39;m Yeoman&amp;quot;&amp;gt;&amp;lt;br&amp;gt;
    Here is your sweet-ass audio player: &amp;lt;br&amp;gt;
    &amp;lt;audio-player&amp;gt;&amp;lt;/audio-player&amp;gt;
  &amp;lt;/p&amp;gt;
&amp;lt;/header&amp;gt;

&amp;lt;ul class=&amp;quot;albums&amp;quot;&amp;gt;
  &amp;lt;li
    ng-repeat=&amp;quot;item in data | startFrom:currentTrack | limitTo:pageSize&amp;quot;
    ng-style=&amp;quot;{&amp;#39;background-image&amp;#39;:&amp;#39;url({{item.image}})&amp;#39;}&amp;quot;
    title=&amp;quot;{{item.artist.name}} - {{item.title}}&amp;quot;
    data-file=&amp;quot;{{item.file}}&amp;quot;
  &amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&amp;lt;footer class=&amp;quot;footer&amp;quot;&amp;gt;
  &amp;lt;p&amp;gt;&amp;amp;hearts; from your super-bud &amp;lt;a href=&amp;quot;https://github.com/konsumer&amp;quot;&amp;gt;konsumer&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/footer&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Last step: style the track images in &lt;code&gt;app/styles/main.css&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-css&quot;&gt;&lt;span class=&quot;class&quot;&gt;.albums&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;{
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;padding&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
&lt;span class=&quot;rule&quot;&gt;}&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;class&quot;&gt;.albums&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;{
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;list-style&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;none&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;px&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;inline-block&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;120&lt;/span&gt;px&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;120&lt;/span&gt;px&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;hexcolor&quot;&gt;#eee&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-size&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; cover&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;border&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;px solid &lt;span class=&quot;hexcolor&quot;&gt;#333&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
&lt;span class=&quot;rule&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dang! Not too much work, for a pretty big payoff. Angular rocks.&lt;/p&gt;
</description>
		</item>

	    <item>
	    	<title>Bootstrap tagging</title>
	    	<link>http://blog.jetboystudio.com/articles/bootstrap-tagging/</link>
	    	<guid isPermaLink="true">http://blog.jetboystudio.com/articles/bootstrap-tagging/</guid>
	    	<pubDate>Mon, 11 Nov 2013 16:01:00 -0800</pubDate>
	    	<author></author>
	    	<description>&lt;p&gt;I had a need for a mongodb-driven tagging widget. The idea is that you get nice tags that you can add &amp;amp; remove, and it knows about tags that are already present.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;First, get some cheap beer, and a bottle of Amaretto. Alternate swigs, and read on.&lt;/p&gt;
&lt;p&gt;I was haing a lot of trouble with various parts of this. I think I just needed a bit o’ gangster-rap &amp;amp; Amaretto. Maybe with my help your roll will be smooth-sails.&lt;/p&gt;
&lt;p&gt;Ok, so first I have a cute lil express.js app. I will detail the entire process.&lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;npm init&lt;/code&gt; to create a new node package.json. Just answer the questions.&lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;npm install --save express &amp;amp;&amp;amp; npm install --save mongoose&lt;/code&gt; to add express &amp;amp; mongoose to your project.&lt;/p&gt;
&lt;p&gt;You can head over to &lt;a href=&quot;https://mongolab.com/&quot;&gt;mongolab&lt;/a&gt; to get a free mongodb, if you don’t want to host it yourself.&lt;/p&gt;
&lt;p&gt;make your server.js look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; express = require(&lt;span class=&quot;string&quot;&gt;&#x27;express&#x27;&lt;/span&gt;),
    app = express(),
    mongoose = require(&lt;span class=&quot;string&quot;&gt;&#x27;mongoose&#x27;&lt;/span&gt;),
    MyModel = require(&lt;span class=&quot;string&quot;&gt;&#x27;./models/MyModel&#x27;&lt;/span&gt;);

mongoose.connect(require(&lt;span class=&quot;string&quot;&gt;&#x27;./config.json&#x27;&lt;/span&gt;).database);

app.configure(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    app.use(express.bodyParser());
    app.use(express.methodOverride());
    app.use(&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;, express.static(&lt;span class=&quot;string&quot;&gt;&#x27;public&#x27;&lt;/span&gt;));
    app.use(app.router);

    app.use(express.logger(&lt;span class=&quot;string&quot;&gt;&#x27;\x1b[33m:method\x1b[0m \x1b[32m:url\x1b[0m :response-time&#x27;&lt;/span&gt;));
    app.use(express.errorHandler({
        dumpExceptions: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,
        showStack: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;
    }));
});

&lt;span class=&quot;comment&quot;&gt;// get a list of available tags&lt;/span&gt;
app.get(&lt;span class=&quot;string&quot;&gt;&#x27;/d/tags&#x27;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(req, res)&lt;/span&gt;{&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;// you can put strings in here to preseed tags. slick!&lt;/span&gt;
    MyModel.find().distinct(&lt;span class=&quot;string&quot;&gt;&#x27;tags&#x27;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(er, d)&lt;/span&gt;{&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; out = [&lt;span class=&quot;string&quot;&gt;&quot;hipster trash&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;euro trash&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;foolish whim&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;good idea&quot;&lt;/span&gt;];
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (er) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res.send(&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;, er);
        res.send(out.concat(d));
    });
});

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; port = require(&lt;span class=&quot;string&quot;&gt;&#x27;./config.json&#x27;&lt;/span&gt;).port || &lt;span class=&quot;number&quot;&gt;8000&lt;/span&gt;;
console.log(&lt;span class=&quot;string&quot;&gt;&#x27;come see us at http://0.0.0.0:&#x27;&lt;/span&gt; + port);

app.listen(port);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;all the &lt;code&gt;app.configure&lt;/code&gt; stuff is me getting fancy. Totally optional if you are running a static webserver somewhere else.&lt;/p&gt;
&lt;p&gt;If you don’t need to preseed your auto-complete list, make your callback look like this fancy (simple) bee-yute:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// get a list of available tags&lt;/span&gt;
app.get(&lt;span class=&quot;string&quot;&gt;&#x27;/d/tags&#x27;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(req, res)&lt;/span&gt;{&lt;/span&gt;
    MyModel.find().distinct(&lt;span class=&quot;string&quot;&gt;&#x27;tags&#x27;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(er, d)&lt;/span&gt;{&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (er) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res.send(&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;, er);
        res.send(d);
    });
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is also a config file called &lt;code&gt;config.json&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-json&quot;&gt;{
    &quot;&lt;span class=&quot;attribute&quot;&gt;database&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;mongodb://&amp;lt;dbuser&amp;gt;:&amp;lt;dbpassword&amp;gt;@&amp;lt;dbhost&amp;gt;:&amp;lt;dbport&amp;gt;/&amp;lt;dbname&amp;gt;&quot;&lt;/span&gt;
&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make sure to add that to .gitignore. Alternately, you can just fill in the mongo URI, above.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MyModel&lt;/code&gt; is an example model. Make sure it has a “tags” string-array field. Let’s make a lil cutie in &lt;code&gt;models/MyModel.js&lt;/code&gt; that looks kinda like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mongoose = require(&lt;span class=&quot;string&quot;&gt;&#x27;mongoose&#x27;&lt;/span&gt;);

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; MyModel = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; mongoose.Schema({
    &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;: String,
    &lt;span class=&quot;string&quot;&gt;&quot;description&quot;&lt;/span&gt;: String,
    &lt;span class=&quot;string&quot;&gt;&quot;cool&quot;&lt;/span&gt;: Boolean,
    &lt;span class=&quot;string&quot;&gt;&quot;tags&quot;&lt;/span&gt;: [String],

    &lt;span class=&quot;string&quot;&gt;&quot;hipster.cool&quot;&lt;/span&gt;: Boolean,
    &lt;span class=&quot;string&quot;&gt;&quot;hipster.ironic&quot;&lt;/span&gt;: Boolean,
    &lt;span class=&quot;string&quot;&gt;&quot;hipster.poser&quot;&lt;/span&gt;: Boolean
});

module.exports = mongoose.model(&lt;span class=&quot;string&quot;&gt;&#x27;MyModel&#x27;&lt;/span&gt;, MyModel);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a sidenote, I realized how to make models in mongoose have a nice Object structure, without pseudo-sub documents (extra ids &amp;amp; overhead.) All you gotta do is name fields things like &lt;code&gt;thing.field&lt;/code&gt;. super-cool!&lt;/p&gt;
&lt;p&gt;Make a lil dev script to insert a bunch of records, mine is silly, feel free to tailor to your own sweet-sweet model.&lt;/p&gt;
&lt;p&gt;I am using my awesome &lt;a href=&quot;https://github.com/konsumer/randopeep&quot;&gt;randopeep&lt;/a&gt; lib. Install with &lt;code&gt;npm install --save-dev randopeep&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;let’s call this file &lt;code&gt;genenerate-hipsters.js&lt;/code&gt; and run it with &lt;code&gt;node genenerate-hipsters.js&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mongoose = require(&lt;span class=&quot;string&quot;&gt;&#x27;mongoose&#x27;&lt;/span&gt;),
    randopeep = require(&lt;span class=&quot;string&quot;&gt;&#x27;randopeep&#x27;&lt;/span&gt;);
    MyModel = require(&lt;span class=&quot;string&quot;&gt;&#x27;./models/MyModel&#x27;&lt;/span&gt;);

mongoose.connect(require(&lt;span class=&quot;string&quot;&gt;&#x27;./config.json&#x27;&lt;/span&gt;).database);

&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;; i++){
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; rec = {
        &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;: randopeep.corporate.name(&lt;span class=&quot;string&quot;&gt;&#x27;cyber&#x27;&lt;/span&gt;),
        &lt;span class=&quot;string&quot;&gt;&quot;description&quot;&lt;/span&gt;: randopeep.corporate.catchPhrase(),
        &lt;span class=&quot;string&quot;&gt;&quot;cool&quot;&lt;/span&gt;: Math.random() &amp;gt;= &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;,
        &lt;span class=&quot;string&quot;&gt;&quot;tags&quot;&lt;/span&gt;: [],
        &lt;span class=&quot;string&quot;&gt;&quot;hipster&quot;&lt;/span&gt;:{
            &lt;span class=&quot;string&quot;&gt;&quot;cool&quot;&lt;/span&gt;: Math.random() &amp;gt;= &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;,
            &lt;span class=&quot;string&quot;&gt;&quot;ironic&quot;&lt;/span&gt;: Math.random() &amp;gt;= &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;,
            &lt;span class=&quot;string&quot;&gt;&quot;poser&quot;&lt;/span&gt;: Math.random() &amp;gt;= &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;
        }
    };

    rec.tags = rec.tags.concat(randopeep.invention(&lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;));
    rec.tags = rec.tags.concat(randopeep.job(&lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;));

    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; s = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MyModel(rec);
    s.save();

    console.log(s);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will generate 100 nice random MyModels, with 50 tags each.&lt;/p&gt;
&lt;p&gt;OK! now, for the client-side code, put this in public/index.html like a champ:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;http://netdna.bootstrapcdn.com/bootstrap/3.0.2/css/bootstrap.min.css&amp;quot;&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;http://cdnjs.cloudflare.com/ajax/libs/tagmanager/3.0.0/tagmanager.css&amp;quot;&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://raw.github.com/jharding/typeahead.js-bootstrap.css/master/typeahead.js-bootstrap.css&amp;quot;&amp;gt;

&amp;lt;script src=&amp;quot;http://codeorigin.jquery.com/jquery-1.10.2.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;http://netdna.bootstrapcdn.com/bootstrap/3.0.2/js/bootstrap.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;http://cdnjs.cloudflare.com/ajax/libs/typeahead.js/0.9.3/typeahead.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;http://cdnjs.cloudflare.com/ajax/libs/tagmanager/3.0.0/tagmanager.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
    &amp;lt;form class=&amp;quot;form-horizontal&amp;quot; role=&amp;quot;form&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
        &amp;lt;label for=&amp;quot;tags&amp;quot;&amp;gt;Tags:&amp;lt;/label&amp;gt;
        &amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;form-control&amp;quot; id=&amp;quot;tags&amp;quot;&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/form&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;script&amp;gt;
var tagger = $(&amp;#39;#tags&amp;#39;).tagsManager();
$(&amp;quot;#tags&amp;quot;).typeahead({
    prefetch: &amp;#39;/d/tags&amp;#39;
}).on(&amp;#39;typeahead:selected&amp;#39;, function (e, d) {
    tagger.tagsManager(&amp;quot;pushTag&amp;quot;, d.value);
});
&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run &lt;code&gt;npm start&lt;/code&gt; and you will have a running webserver &amp;amp; JSON interface to your db’s tags.&lt;/p&gt;
&lt;p&gt;Now, yer all set. It still needs a little style love, but basically does what is needed. Pretty extreme level of magic for such a small investment, eh?&lt;/p&gt;
</description>
		</item>

	    <item>
	    	<title>Virtualbox Networking</title>
	    	<link>http://blog.jetboystudio.com/articles/virtualbox-networking/</link>
	    	<guid isPermaLink="true">http://blog.jetboystudio.com/articles/virtualbox-networking/</guid>
	    	<pubDate>Wed, 17 Jul 2013 01:48:00 -0700</pubDate>
	    	<author></author>
	    	<description>&lt;p&gt;Virtualbox networking can be tricky.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;/articles/easy-dev-environment/&quot;&gt;Earlier&lt;/a&gt; I talked about setting up a VirtualBox machine for LAMP development.  It’s a great way to keep your ideas/experiments fairly atomic, and not effect your regular system.  On my Hackintosh, sometimes my network drivers are not 100%, because they are really just fooling the OS into working.  I noticed after a recent update that Virtualbox bridged networking would make the whole network stack stop working, and I couldn’t get to my Virtual Machines, or even to the internet from the host after starting a machine.  Here is how I fixed it, and made it a bit more robust, for the future.&lt;/p&gt;
&lt;h2 id=&quot;2-networks&quot;&gt;2 Networks&lt;/h2&gt;
&lt;p&gt;We are going to make an internal host-only net, for serving up stuff just to the host, and an external net so the vmachine can get to the internet.&lt;/p&gt;
&lt;p&gt;In VirtualBox, go to Virtualbox/Preferences, then Network.  Make a host-only network. Mine was called “vboxnet0”.&lt;/p&gt;
&lt;p&gt;On your virtual machine, under Network, set Adapter 1 to “Host-only Adapter”.&lt;/p&gt;
&lt;p&gt;Under Adapter 2, set it to “NAT”. For both, under Advanced, set it to “Intel PRO/1000 MT Desktop” and set promiscuous mode to “DENY”.&lt;/p&gt;
&lt;p&gt;Start up the machine.&lt;/p&gt;
&lt;p&gt;type &lt;code&gt;sudo lshw -C network | grep logical&lt;/code&gt; to get the 2 device names (in my case: eth2 &amp;amp; eth3.)&lt;/p&gt;
&lt;p&gt;type &lt;code&gt;sudo vim /etc/network/interfaces&lt;/code&gt; and replace my devices, with whatever you got from above:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# local-only vbox net
auto eth3
iface eth3 inet dhcp

# NAT net
auto eth2
iface eth2 inet dhcp&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;testing-and-usage&quot;&gt;Testing and Usage&lt;/h2&gt;
&lt;p&gt;Restart the vmachine.&lt;/p&gt;
&lt;p&gt;type &lt;code&gt;ping google.com&lt;/code&gt; from vmachine to test if it can get to the internet.&lt;/p&gt;
&lt;p&gt;Type &lt;code&gt;ifconfig&lt;/code&gt; to get the IP address that were assigned to each interface. On mine, the local interface (eth3) had an IP of 192.168.56.101, and a NAT’ed (eth2) address of 10.0.3.15. On your host, go add the internal address to &lt;code&gt;/etc/hosts&lt;/code&gt; so you can call the machine by name:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# vhosts served by VirtualBox
192.168.56.101 project1.local project1
192.168.56.101 project2.local project2
192.168.56.101 project3.local project3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you setup everything else, as &lt;a href=&quot;/articles/easy-dev-environment/&quot;&gt;I did&lt;/a&gt; you should have files in ~/Sites/project1/webroot on host machine that gets served-up, and you should be able to &lt;code&gt;ping 192.168.56.101&lt;/code&gt; from the host.&lt;/p&gt;
</description>
		</item>

	    <item>
	    	<title>Facebook PHP kinda sucks, here&#x27;s how to make it better</title>
	    	<link>http://blog.jetboystudio.com/articles/facebook-and-php/</link>
	    	<guid isPermaLink="true">http://blog.jetboystudio.com/articles/facebook-and-php/</guid>
	    	<pubDate>Fri, 12 Jul 2013 20:15:00 -0700</pubDate>
	    	<author></author>
	    	<description>&lt;p&gt;Deving for Facebook apps kinda sucks using server-side PHP. PHP’s lib is not 100% with all browsers and has lil glitches if you don’t do it right, and you gotta really pay attention to a lot of details if you need info from the parent page.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I was making a Facebook app that was consumed by many branded retailers, and they all gotta have the right logos, etc.  I wanted 1 codebase &amp;amp; facebook tab-app to serve up an app for everyone, and not cause me too much grief. The methodology I am describing is not what I went with, for fear of missing deadlines, but is how you should do it, if you can, and have control from the start.&lt;/p&gt;
&lt;p&gt;This post will also explain, in detail, how to setup a nice &amp;amp; neat &lt;a href=&quot;http://getcomposer.org/&quot;&gt;composer&lt;/a&gt; app, that uses &lt;a href=&quot;https://packagist.org/packages/mustache/mustache&quot;&gt;mustache&lt;/a&gt; for views, and is fairly maintainable.&lt;/p&gt;
&lt;h2 id=&quot;the-php-lib-is-not-in-sync-with-the-js&quot;&gt;The PHP lib is not in sync with the JS&lt;/h2&gt;
&lt;p&gt;The first thing you gotta know, if you need info about what page is calling the app and you support IE, is that no one is your friend. You are in a dark and lonely place where Facebook says “seriously dudes, that’s just dumb” to the lone way that IE can do cross-iframe communication. You gotta double-up on cookies &amp;amp; go crazy with the session for anything to persist. Yer gonna have to get yer hands filthy with javascript, so get ready. Your only sword in this masochistic and ill-planned D&amp;amp;D game is to do as much as possible client-side.  Let Facebook’s javascript API handle all the details, and just pass it to your lil PHP friend, in the back, when you need to save stuff. Facebook’s Javascript can do all but know about the page calling you. It can handle users, do graph lookups (if you know the name, find out more.)&lt;/p&gt;
&lt;h3 id=&quot;setup-your-app-with-composer&quot;&gt;Setup your app with composer&lt;/h3&gt;
&lt;p&gt;I like &lt;a href=&quot;http://getcomposer.org/&quot;&gt;composer&lt;/a&gt;. It makes dev’ing framework-less PHP apps a breeze, and if planned correctly, it can help you organize your app, as if you are using a framework.  PHP class auto-loading is cool, and keeps your code neat.  Go install it in your path. Make a file called &lt;code&gt;composer.json&lt;/code&gt; that looks like this:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;composer.json&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-json&quot;&gt;{
    &quot;&lt;span class=&quot;attribute&quot;&gt;require&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;{
        &quot;&lt;span class=&quot;attribute&quot;&gt;facebook/php-sdk&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;dev-master&quot;&lt;/span&gt;
    &lt;/span&gt;}&lt;/span&gt;,
    &quot;&lt;span class=&quot;attribute&quot;&gt;autoload&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;{
        &quot;&lt;span class=&quot;attribute&quot;&gt;classmap&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;[
            &lt;span class=&quot;string&quot;&gt;&quot;app&quot;&lt;/span&gt;
        ]
    &lt;/span&gt;}
&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means “this app requires the dev version of facebook-sdk” and “autoload my own app’s classes from app/ folder”&lt;/p&gt;
&lt;p&gt;Make a folder called &lt;code&gt;app/&lt;/code&gt; and a folder called &lt;code&gt;webroot/&lt;/code&gt;.  Point your webserver to &lt;code&gt;webroot&lt;/code&gt; (see &lt;a href=&quot;/articles/easy-dev-environment/&quot;&gt;here&lt;/a&gt; for this all done automatically on a virtual machine.)&lt;/p&gt;
&lt;p&gt;Now, run &lt;code&gt;composer install&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Anytime you change files in &lt;code&gt;app/&lt;/code&gt; or dependencies, run &lt;code&gt;composer update&lt;/code&gt;. I like to put this in git-hooks and git-ignore &lt;code&gt;vendor/&lt;/code&gt; &amp;amp; &lt;code&gt;composer.lock&lt;/code&gt;, so I don’t have to bother with it.&lt;/p&gt;
&lt;h3 id=&quot;routing&quot;&gt;Routing&lt;/h3&gt;
&lt;p&gt;Think of &lt;code&gt;webroot/index.php&lt;/code&gt; as a basic router and loader of other classes.  Try and put as much functionality as possible into the classes defined in &lt;code&gt;app/&lt;/code&gt;, rather than the &lt;code&gt;index.php&lt;/code&gt; file.  If your facebook app has only 1 entry point, then you don’t need an actual URL router, but if you have any links (AJAX, GET, POST) you may want to install a proper URL router.  I recommend &lt;a href=&quot;https://packagist.org/packages/torophp/torophp&quot;&gt;ToroPHP&lt;/a&gt;, so make your composer.json file look like this:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;composer.json&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-json&quot;&gt;{
    &quot;&lt;span class=&quot;attribute&quot;&gt;require&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;{
        &quot;&lt;span class=&quot;attribute&quot;&gt;torophp/torophp&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;dev-master&quot;&lt;/span&gt;&lt;/span&gt;,
        &quot;&lt;span class=&quot;attribute&quot;&gt;facebook/php-sdk&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;dev-master&quot;&lt;/span&gt;
    &lt;/span&gt;}&lt;/span&gt;,
    &quot;&lt;span class=&quot;attribute&quot;&gt;autoload&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;{
        &quot;&lt;span class=&quot;attribute&quot;&gt;classmap&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;[
            &lt;span class=&quot;string&quot;&gt;&quot;app&quot;&lt;/span&gt;
        ]
    &lt;/span&gt;}
&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For Toro clean-urls, I added this:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;webroot/.htaccess&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-apache&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;common&quot;&gt;RewriteEngine&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;on&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;common&quot;&gt;RewriteCond&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;cbracket&quot;&gt;%{REQUEST_FILENAME}&lt;/span&gt; !-f
&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;common&quot;&gt;RewriteCond&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;cbracket&quot;&gt;%{REQUEST_FILENAME}&lt;/span&gt; !-d
&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;common&quot;&gt;RewriteCond&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;$1&lt;/span&gt; !^(index\.php)
&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;common&quot;&gt;RewriteRule&lt;/span&gt;&lt;/span&gt; ^(.*)$ /index.php/&lt;span class=&quot;number&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;sqbracket&quot;&gt; [L]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Go to Facebook, and &lt;a href=&quot;https://developers.facebook.com/apps&quot;&gt;make your “Page Tab” app&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Set the “Page Tab URL” to whatever URL resolves to your app’s webroot.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For all PHP code examples, below, leave off the &lt;code&gt;?&amp;gt;&lt;/code&gt; on the end. I just add it for syntax-highlighting to work, and a space after it is hard to find, and will mess with header stuff.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I made a &lt;code&gt;config.php&lt;/code&gt; file, outside of the webroot, to handle all configuration.  Mine looks like this, but you could definately do something fancier with a class/database/etc:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;config.php&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-php&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;comment&quot;&gt;// DEV: output ALL errors to screen&lt;/span&gt;
error_reporting(E_ALL);
ini_set(&lt;span class=&quot;string&quot;&gt;&#x27;display_errors&#x27;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);

&lt;span class=&quot;comment&quot;&gt;// set timezone for all date functions&lt;/span&gt;
date_default_timezone_set(&lt;span class=&quot;string&quot;&gt;&#x27;America/Los_Angeles&#x27;&lt;/span&gt;);

&lt;span class=&quot;variable&quot;&gt;$config&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;();

&lt;span class=&quot;variable&quot;&gt;$config&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&#x27;title&#x27;&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&quot;My Cool Facebook App&quot;&lt;/span&gt;;

&lt;span class=&quot;variable&quot;&gt;$config&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&#x27;view_dir&#x27;&lt;/span&gt;] = &lt;span class=&quot;keyword&quot;&gt;__DIR__&lt;/span&gt; . &lt;span class=&quot;string&quot;&gt;&quot;/views/&quot;&lt;/span&gt;;

&lt;span class=&quot;comment&quot;&gt;// Facebook App info for tab-app&lt;/span&gt;
&lt;span class=&quot;variable&quot;&gt;$config&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&#x27;facebook&#x27;&lt;/span&gt;] = &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;(
    &lt;span class=&quot;string&quot;&gt;&#x27;appId&#x27;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;string&quot;&gt;&#x27;BADWOLFBADWOLFBADWOLF&#x27;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&#x27;secret&#x27;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;string&quot;&gt;&#x27;BADWOLFBADWOLFBADWOLF&#x27;&lt;/span&gt;
);

&lt;span class=&quot;preprocessor&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Replace Doctor Who reference with your credentials. Put whatever else site-specific config you need in there.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;webroot/index.php&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-php&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; dirname(&lt;span class=&quot;keyword&quot;&gt;__DIR__&lt;/span&gt;) . &lt;span class=&quot;string&quot;&gt;&#x27;/config.php&#x27;&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; dirname(&lt;span class=&quot;keyword&quot;&gt;__DIR__&lt;/span&gt;) . &lt;span class=&quot;string&quot;&gt;&#x27;/vendor/autoload.php&#x27;&lt;/span&gt;;
session_start();

&lt;span class=&quot;comment&quot;&gt;// save any info we get about app/auth from facebook&lt;/span&gt;
&lt;span class=&quot;variable&quot;&gt;$facebook&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Facebook(&lt;span class=&quot;variable&quot;&gt;$config&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&#x27;facebook&#x27;&lt;/span&gt;]);
&lt;span class=&quot;variable&quot;&gt;$sr&lt;/span&gt; = &lt;span class=&quot;variable&quot;&gt;$facebook&lt;/span&gt;-&amp;gt;getSignedRequest();
&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;keyword&quot;&gt;empty&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$sr&lt;/span&gt;)){
    &lt;span class=&quot;variable&quot;&gt;$_SESSION&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&#x27;signed_request&#x27;&lt;/span&gt;] = &lt;span class=&quot;variable&quot;&gt;$sr&lt;/span&gt;;
}

&lt;span class=&quot;comment&quot;&gt;// here you could verify $_SESSION[&#x27;signed_request&#x27;][&#x27;page&#x27;][&#x27;id&#x27;] is authorized to use this tab, if you wanted.&lt;/span&gt;

ToroHook::add(&lt;span class=&quot;string&quot;&gt;&quot;404&quot;&lt;/span&gt;,  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    header(&lt;span class=&quot;string&quot;&gt;&#x27;HTTP/1.0 404 Not Found&#x27;&lt;/span&gt;);
    &lt;span class=&quot;variable&quot;&gt;$controller&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BaseController();
    &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$controller&lt;/span&gt;-&amp;gt;view(&lt;span class=&quot;string&quot;&gt;&quot;404&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#x27;title&#x27;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;string&quot;&gt;&#x27;Not Found&#x27;&lt;/span&gt;));
});

Toro::serve(&lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;(
    &lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;Home&quot;&lt;/span&gt;
));


&lt;span class=&quot;preprocessor&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, go make a &lt;code&gt;app/Home.php&lt;/code&gt;. The method &lt;code&gt;get()&lt;/code&gt; will handle GET requests to “/“. I like using a template-lib like &lt;a href=&quot;https://packagist.org/packages/mustache/mustache&quot;&gt;mustache&lt;/a&gt; and a BaseController class that all my controller extend that is smart enough to do 90% of the work. If you want to go that direction, add &lt;code&gt;&amp;quot;mustache/mustache&amp;quot;: &amp;quot;*&amp;quot;&lt;/code&gt; to your composer.json’s &lt;code&gt;require&lt;/code&gt; section. I will show a quick example, but how you actually implement your app is obviously totally up to you. Above, in the 404 function, I am using BaseController, which I will define, below.&lt;/p&gt;
&lt;p&gt;The facebook stuff is just to save any incoming facebook info, if there is some.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;app/BaseController.php&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-php&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BaseController&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;$tpl&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;$context&lt;/span&gt;=array&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;$layout&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;layout&quot;&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;$name&lt;/span&gt;=NULL)&lt;/span&gt;{&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$config&lt;/span&gt;;
        &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$mustache&lt;/span&gt;;

        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;empty&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$mustache&lt;/span&gt;)){
            &lt;span class=&quot;variable&quot;&gt;$mustache&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Mustache_Engine(&lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;(
                &lt;span class=&quot;string&quot;&gt;&#x27;cache&#x27;&lt;/span&gt; =&amp;gt; sys_get_temp_dir () . &lt;span class=&quot;string&quot;&gt;&#x27;/cache/mustache/&#x27;&lt;/span&gt; . &lt;span class=&quot;variable&quot;&gt;$_SERVER&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&#x27;SERVER_NAME&#x27;&lt;/span&gt;],
                &lt;span class=&quot;string&quot;&gt;&#x27;cache_file_mode&#x27;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;number&quot;&gt;0666&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// Please, configure your umask instead of doing this :)&lt;/span&gt;
                &lt;span class=&quot;string&quot;&gt;&#x27;loader&#x27;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Mustache_Loader_FilesystemLoader(&lt;span class=&quot;variable&quot;&gt;$config&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&#x27;view_dir&#x27;&lt;/span&gt;]),
                &lt;span class=&quot;string&quot;&gt;&#x27;partials_loader&#x27;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Mustache_Loader_FilesystemLoader(&lt;span class=&quot;variable&quot;&gt;$config&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&#x27;view_dir&#x27;&lt;/span&gt;]),
                &lt;span class=&quot;string&quot;&gt;&#x27;helpers&#x27;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;(),
                &lt;span class=&quot;string&quot;&gt;&#x27;escape&#x27;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;$value&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;
                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; htmlspecialchars(&lt;span class=&quot;variable&quot;&gt;$value&lt;/span&gt;, ENT_COMPAT, &lt;span class=&quot;string&quot;&gt;&#x27;UTF-8&#x27;&lt;/span&gt;);
                },
                &lt;span class=&quot;string&quot;&gt;&#x27;charset&#x27;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#x27;UTF-8&#x27;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&#x27;logger&#x27;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Mustache_Logger_StreamLogger(&lt;span class=&quot;string&quot;&gt;&#x27;php://stderr&#x27;&lt;/span&gt;),
                &lt;span class=&quot;string&quot;&gt;&#x27;strict_callables&#x27;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;,
            ));
        }

        &lt;span class=&quot;variable&quot;&gt;$context&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&#x27;title&#x27;&lt;/span&gt;] = &lt;span class=&quot;keyword&quot;&gt;empty&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$context&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&#x27;title&#x27;&lt;/span&gt;]) ? &lt;span class=&quot;variable&quot;&gt;$config&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&#x27;title&#x27;&lt;/span&gt;] : &lt;span class=&quot;variable&quot;&gt;$context&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&#x27;title&#x27;&lt;/span&gt;] . &lt;span class=&quot;string&quot;&gt;&#x27; - &#x27;&lt;/span&gt; . &lt;span class=&quot;variable&quot;&gt;$config&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&#x27;title&#x27;&lt;/span&gt;];
        &lt;span class=&quot;variable&quot;&gt;$context&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&#x27;config&#x27;&lt;/span&gt;] = &lt;span class=&quot;variable&quot;&gt;$config&lt;/span&gt;;
        &lt;span class=&quot;variable&quot;&gt;$context&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&#x27;request&#x27;&lt;/span&gt;] = &lt;span class=&quot;variable&quot;&gt;$_REQUEST&lt;/span&gt;;
        &lt;span class=&quot;variable&quot;&gt;$context&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&#x27;server&#x27;&lt;/span&gt;] = &lt;span class=&quot;variable&quot;&gt;$_SERVER&lt;/span&gt;;
        &lt;span class=&quot;variable&quot;&gt;$context&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&#x27;session&#x27;&lt;/span&gt;] = &lt;span class=&quot;variable&quot;&gt;$_SESSION&lt;/span&gt;;
        &lt;span class=&quot;variable&quot;&gt;$context&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&#x27;template&#x27;&lt;/span&gt;] = &lt;span class=&quot;keyword&quot;&gt;empty&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$name&lt;/span&gt;) ? &lt;span class=&quot;variable&quot;&gt;$tpl&lt;/span&gt; : &lt;span class=&quot;variable&quot;&gt;$name&lt;/span&gt;;

        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;keyword&quot;&gt;empty&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$layout&lt;/span&gt;)){
            &lt;span class=&quot;variable&quot;&gt;$context&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&#x27;content&#x27;&lt;/span&gt;] = &lt;span class=&quot;variable&quot;&gt;$mustache&lt;/span&gt;-&amp;gt;render(&lt;span class=&quot;variable&quot;&gt;$tpl&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;$context&lt;/span&gt;);
            &lt;span class=&quot;variable&quot;&gt;$out&lt;/span&gt; = &lt;span class=&quot;variable&quot;&gt;$mustache&lt;/span&gt;-&amp;gt;render(&lt;span class=&quot;variable&quot;&gt;$layout&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;$context&lt;/span&gt;);
        }&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;{
            &lt;span class=&quot;variable&quot;&gt;$out&lt;/span&gt; = &lt;span class=&quot;variable&quot;&gt;$mustache&lt;/span&gt;-&amp;gt;render(&lt;span class=&quot;variable&quot;&gt;$tpl&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;$context&lt;/span&gt;);
        }

        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$out&lt;/span&gt;;
    }

    &lt;span class=&quot;comment&quot;&gt;// generic views&lt;/span&gt;
    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;{&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$this&lt;/span&gt;-&amp;gt;view(&lt;span class=&quot;variable&quot;&gt;$this&lt;/span&gt;-&amp;gt;template, &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#x27;title&#x27;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;variable&quot;&gt;$this&lt;/span&gt;-&amp;gt;page_title));
    }
    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;get_xhr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;{&lt;/span&gt;
        header(&lt;span class=&quot;string&quot;&gt;&quot;Content-Type:text/html&quot;&lt;/span&gt;);
        &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#x27;&amp;lt;div class=&quot;xhr&quot;&amp;gt;&#x27;&lt;/span&gt;.&lt;span class=&quot;variable&quot;&gt;$this&lt;/span&gt;-&amp;gt;view(&lt;span class=&quot;variable&quot;&gt;$this&lt;/span&gt;-&amp;gt;template, &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;(), &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt;).&lt;span class=&quot;string&quot;&gt;&#x27;&amp;lt;/div&amp;gt;&#x27;&lt;/span&gt;;
    }
}

&lt;span class=&quot;preprocessor&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;app/Home.php&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-php&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Home&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BaseController&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$template&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;home&quot;&lt;/span&gt;;
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$page_title&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt;;
}

&lt;span class=&quot;preprocessor&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok, so we have a generic BaseController, that does Mustache, we have 2 generic methods: &lt;code&gt;get&lt;/code&gt; &amp;amp; &lt;code&gt;get_xhr&lt;/code&gt; which just serve up the view, with or without a layout, we have a Home controller, and we have a 404 error handler. Since you made changes to the classes, don’t forget to run &lt;code&gt;composer update&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Again, this is just an example, but for all this to work as it is, &lt;code&gt;views/&lt;/code&gt; holds Mustache templates, and include &lt;code&gt;layout.mustache&lt;/code&gt;, &lt;code&gt;404.mustache&lt;/code&gt;, and &lt;code&gt;home.mustache&lt;/code&gt;. Go make those. Mine look like this:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;views/layout.mustache&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot; class=&amp;quot;no-js&amp;quot; data-app=&amp;quot;{{config.facebook.appId}}&amp;quot;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
    &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;IE=9&amp;quot; /&amp;gt;
    &amp;lt;title&amp;gt;{{title}}&amp;lt;/title&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;description&amp;quot; content=&amp;quot;&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;author&amp;quot; content=&amp;quot;Your name here&amp;gt;
    &amp;lt;script src=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/modernizr/2.6.2/modernizr.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;link href=&amp;quot;/css/site.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt;
    {{#session.signed_request.page.id}}
        &amp;lt;script&amp;gt;window.page={ id: &amp;quot;{{session.signed_request.page.id}}&amp;quot;, liked: {{session.signed_request.page.liked}}, admin: {{session.signed_request.page.admin}} };&amp;lt;/script&amp;gt;
    {{/session.signed_request.page.id}}
  &amp;lt;/head&amp;gt;
  &amp;lt;body class=&amp;quot;page-{{template}}&amp;quot;&amp;gt;
    &amp;lt;div id=&amp;quot;wrapper&amp;quot;&amp;gt;
      &amp;lt;header&amp;gt;&amp;lt;h1&amp;gt;{{config.title}}&amp;lt;/h1&amp;gt;&amp;lt;/header&amp;gt;
      &amp;lt;section class=&amp;quot;clearfix&amp;quot;&amp;gt;{{{content}}}&amp;lt;/section&amp;gt;
      &amp;lt;footer&amp;gt;&amp;amp;copy; 2013 {{config.title}}&amp;lt;/footer&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;script src=&amp;quot;//ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;/js/site.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;views/404.mustache&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&amp;lt;h2&amp;gt;Page not found&amp;lt;/h2&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;views/home.mustache&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&amp;lt;h2&amp;gt;Welcome&amp;lt;/h2&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;{{#session.signed_request.page.id}}&lt;/code&gt; bit in the header tells the client-side javascript about the page that called it. The &lt;code&gt;{{config.facebook.appId}}&lt;/code&gt; part is the facebook app id of your tab-app.&lt;/p&gt;
&lt;p&gt;So, now is the part where you start work on the client-side javascript we talked about earlier.  How you do this totally depends on how your app works, but for illustration, here is mine:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;webroot/js/site.js&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// immediate fangate, if you setup the CSS&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (window.page &amp;amp;&amp;amp; window.page.liked){
    document.getElementsByTagName(&lt;span class=&quot;string&quot;&gt;&#x27;body&#x27;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].attributes[&lt;span class=&quot;string&quot;&gt;&#x27;class&#x27;&lt;/span&gt;].value+=&lt;span class=&quot;string&quot;&gt;&quot; liked&quot;&lt;/span&gt;;
}

&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (window === window.top){
    console.log(&lt;span class=&quot;string&quot;&gt;&#x27;not in an iframe, not on facebook.&#x27;&lt;/span&gt;);
}&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;{
    console.log(&lt;span class=&quot;string&quot;&gt;&#x27;in an iframe&#x27;&lt;/span&gt;);
}

window.fbAsyncInit = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    FB.init({
        appId      : document.getElementsByTagName(&lt;span class=&quot;string&quot;&gt;&#x27;html&#x27;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].attributes[&lt;span class=&quot;string&quot;&gt;&#x27;data-app&#x27;&lt;/span&gt;].value,
        channelUrl : &lt;span class=&quot;string&quot;&gt;&#x27;//&#x27;&lt;/span&gt; + document.location.host + document.location.pathname + &lt;span class=&quot;string&quot;&gt;&#x27;/channel.php&#x27;&lt;/span&gt;,
        status     : &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,
        cookie     : &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,
        xfbml      : &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;
    });
    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;{&lt;/span&gt;
        FB.login(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(response)&lt;/span&gt; {&lt;/span&gt;
            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (response.authResponse) {
                console.log(&lt;span class=&quot;string&quot;&gt;&#x27;logged in&#x27;&lt;/span&gt;);
                FB.api(&lt;span class=&quot;string&quot;&gt;&#x27;/me&#x27;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(user)&lt;/span&gt;{&lt;/span&gt;
                    facebook_authorized(user, FB, response);                
                });
            } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
                console.log(&lt;span class=&quot;string&quot;&gt;&#x27;User cancelled login or did not fully authorize.&#x27;&lt;/span&gt;);
                login();
            }
        },{scope: &lt;span class=&quot;string&quot;&gt;&#x27;email&#x27;&lt;/span&gt;});
    }

    FB.getLoginStatus(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(response)&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (response.status === &lt;span class=&quot;string&quot;&gt;&#x27;connected&#x27;&lt;/span&gt;) {
            FB.api(&lt;span class=&quot;string&quot;&gt;&#x27;/me&#x27;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(user)&lt;/span&gt;{&lt;/span&gt;
                facebook_authorized(user, FB, response);
            });
        } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (response.status === &lt;span class=&quot;string&quot;&gt;&#x27;not_authorized&#x27;&lt;/span&gt;) {
            login();
        } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
            login();
        }
    });
};

&lt;span class=&quot;comment&quot;&gt;// callback for Facebook correctly authorized&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;facebook_authorized&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(user, FB, auth)&lt;/span&gt;{&lt;/span&gt;
    FB.Canvas.setSize();
    FB.Canvas.setAutoGrow();

    console.log(&lt;span class=&quot;string&quot;&gt;&#x27;FB&#x27;&lt;/span&gt;, FB);
    console.log(&lt;span class=&quot;string&quot;&gt;&#x27;user&#x27;&lt;/span&gt;, user);
    console.log(&lt;span class=&quot;string&quot;&gt;&#x27;auth&#x27;&lt;/span&gt;, auth);

    &lt;span class=&quot;comment&quot;&gt;// do your stuff here.&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;// you have window.page, user, FB, and the auth objects to do things&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;// make sure to verify them, and do cool stuff&lt;/span&gt;
}


(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(d, s, id)&lt;/span&gt;{&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; js, fjs = d.getElementsByTagName(s)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];
&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (d.getElementById(id)) {&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;}
js = d.createElement(s); js.id = id;
js.src = &lt;span class=&quot;string&quot;&gt;&quot;//connect.facebook.net/en_US/all.js&quot;&lt;/span&gt;;
fjs.parentNode.insertBefore(js, fjs);
}(document, &lt;span class=&quot;string&quot;&gt;&#x27;script&#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#x27;facebook-jssdk&#x27;&lt;/span&gt;));&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will add “liked” to body class, so you can hide stuff by default and show it under body.liked in CSS, for a fangate. You can see how I detect if I’m in an iframe, do what you want if not.  &lt;code&gt;facebook_authorized()&lt;/code&gt; is your entry-point, and has access to all the data you will need.&lt;/p&gt;
&lt;p&gt;The way this is all setup, you can get just the content on the server by sending ajax requests to routes, so that might be good for things like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;$.get(&lt;span class=&quot;string&quot;&gt;&#x27;/about&#x27;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(content)&lt;/span&gt;{&lt;/span&gt;
    $(&lt;span class=&quot;string&quot;&gt;&#x27;section&#x27;&lt;/span&gt;).html(content);
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and make a route in &lt;code&gt;index.php&lt;/code&gt; like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-php&quot;&gt;    &lt;span class=&quot;preprocessor&quot;&gt;&amp;lt;?php&lt;/span&gt;

    Toro::serve(&lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;(
        &lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;Home&quot;&lt;/span&gt;,
        &lt;span class=&quot;string&quot;&gt;&quot;/about&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;About&quot;&lt;/span&gt;
    ));

    &lt;span class=&quot;preprocessor&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and &lt;strong&gt;app/About.php&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-php&quot;&gt;    &lt;span class=&quot;preprocessor&quot;&gt;&amp;lt;?php&lt;/span&gt;

    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;About&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BaseController&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$template&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;about&quot;&lt;/span&gt;;
        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$page_title&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;About Us&quot;&lt;/span&gt;;
    }

    &lt;span class=&quot;preprocessor&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and &lt;strong&gt;views/about.mustache&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;    &amp;lt;h1&amp;gt;o hai!&amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;/pre&gt;
</description>
		</item>

	    <item>
	    	<title>Arduino Serial Port Trick</title>
	    	<link>http://blog.jetboystudio.com/articles/arduino-serial/</link>
	    	<guid isPermaLink="true">http://blog.jetboystudio.com/articles/arduino-serial/</guid>
	    	<pubDate>Mon, 20 May 2013 07:42:00 -0700</pubDate>
	    	<author></author>
	    	<description>&lt;p&gt;Recently, I was making code on an Arduino Uno, that also needed to run on a Mega 2560. The Mega has 4 Harware serial ports, and the Uno has one.  I wanted it to auto-create Serial1, if needed, so I don’t have to change my code.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Having a look at HardwareSerial.h, I saw this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-c++&quot;&gt;#if defined(UBRRH) || defined(UBRR0H)
  extern HardwareSerial Serial;
#elif defined(USBCON)
  #include &amp;quot;USBAPI.h&amp;quot;
//  extern HardwareSerial Serial_;  
#endif
#if defined(UBRR1H)
  extern HardwareSerial Serial1;
#endif
#if defined(UBRR2H)
  extern HardwareSerial Serial2;
#endif
#if defined(UBRR3H)
  extern HardwareSerial Serial3;
#endif&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, at the top of my sketch, I put this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-c++&quot;&gt;#ifndef UBRR1H
#include &amp;lt;SoftwareSerial.h&amp;gt;
SoftwareSerial Serial1(10, 11); // RX, TX
#endif&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which will load a SoftwareSerial (on pins 10 &amp;amp; 11) at Serial1 (which is the same as the name on the Mega.)&lt;/p&gt;
&lt;p&gt;Now, I can do this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-c++&quot;&gt;#ifndef UBRR1H
#include &amp;lt;SoftwareSerial.h&amp;gt;
SoftwareSerial Serial1(10, 11); // RX, TX
#endif

void setup()  
{
  Serial.begin(19200);
  Serial1.begin(19200);
}

void loop()
{
  if (Serial1.available()) {
      Serial.write((char)Serial1.read());
  }
  if (Serial.available()) {
      Serial1.write((char)Serial.read());
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
		</item>

	    <item>
	    	<title>Cool SSH Trick</title>
	    	<link>http://blog.jetboystudio.com/articles/ec2-ssh-trick/</link>
	    	<guid isPermaLink="true">http://blog.jetboystudio.com/articles/ec2-ssh-trick/</guid>
	    	<pubDate>Tue, 14 May 2013 09:07:00 -0700</pubDate>
	    	<author></author>
	    	<description>&lt;p&gt;I have a generic disposable SSH keypair for working on projects on AWS.  I like to not have to remember dumb details (especially when I’m drunk.)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Here is how to only have to type &lt;code&gt;ssh HOST&lt;/code&gt; and have it use the right key with all new Ubuntu instances I spin-up. Make a file called &lt;code&gt;~/.ssh/config&lt;/code&gt; that looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Host *.compute.amazonaws.com
    User ubuntu
    IdentityFile ~/.ssh/deploy.key&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Save a key named “deploy” in &lt;code&gt;~/.ssh/deploy.key&lt;/code&gt; and it will automatically use that, and “ubuntu” username.&lt;/p&gt;
&lt;p&gt;If you need to generate a pubkey (like for a github project deploy key, etc) Use this command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ssh-keygen -y -f ~/.ssh/deploy.key&lt;/code&gt;&lt;/p&gt;
</description>
		</item>

	    <item>
	    	<title>Automated Clustered Load Testing with EC2 &amp; node</title>
	    	<link>http://blog.jetboystudio.com/articles/ec2-automated-testing/</link>
	    	<guid isPermaLink="true">http://blog.jetboystudio.com/articles/ec2-automated-testing/</guid>
	    	<pubDate>Fri, 10 May 2013 07:42:00 -0700</pubDate>
	    	<author></author>
	    	<description>&lt;p&gt;I made a simple little clustered testing system, using &lt;a href=&quot;https://github.com/Samuel29/NodeStressSuite&quot;&gt;NodeStressSuite&lt;/a&gt;. Basically, I want it to launch a bunch of instances, clobber a server, then remove all the machines.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This is all automated, so you just run the EC2-builder, and run it. This is basically a legit use of a DDOS botnet. Here is how I did it.&lt;/p&gt;
&lt;p&gt;To get my loadtester, check out &lt;a href=&quot;https://github.com/konsumer/loadtester&quot;&gt;the github page&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;testing-framework&quot;&gt;Testing Framework&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Samuel29/NodeStressSuite&quot;&gt;NodeStressSuite&lt;/a&gt; is a still-developed version of &lt;a href=&quot;https://github.com/benschmaus/nodeload&quot;&gt;nodeload&lt;/a&gt;. It’s a lot like Apache’s ab, but written in javascript, multi-suystem concurrent, and fancy! Be sure to go check it out to get an idea of the cool stuff you can do with it.&lt;/p&gt;
&lt;p&gt;Here is how I added it to my project:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install --save &amp;quot;git://github.com/Samuel29/NodeStressSuite.git#master&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will install nss.&lt;/p&gt;
&lt;h3 id=&quot;modular-tests&quot;&gt;Modular tests&lt;/h3&gt;
&lt;p&gt;I want to be able to just plug-in a modular test, whenever I need to test something new.  I want to include all the options needed to test a server.  Here is the basic test I wrote, which includes all the options to stress-test &lt;a href=&quot;http://jetboystudio.com&quot;&gt;http://jetboystudio.com&lt;/a&gt;. I save it as &lt;code&gt;jetboy.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// simple 3 minutes test&lt;/span&gt;

module.exports = {
    name: &lt;span class=&quot;string&quot;&gt;&quot;jetboy&quot;&lt;/span&gt;,
    comment:&lt;span class=&quot;string&quot;&gt;&quot;Simple load test for Jetboy Studio&quot;&lt;/span&gt;,
    host: &lt;span class=&quot;string&quot;&gt;&#x27;www.jetboystudio.com&#x27;&lt;/span&gt;,
    port: &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;,
    timeLimit: &lt;span class=&quot;number&quot;&gt;180&lt;/span&gt;,
    loadProfile: [[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], [&lt;span class=&quot;number&quot;&gt;180&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;400&lt;/span&gt;] ],
    stats: [
        &lt;span class=&quot;string&quot;&gt;&#x27;rps&#x27;&lt;/span&gt;,
        &lt;span class=&quot;string&quot;&gt;&#x27;result-codes&#x27;&lt;/span&gt;,
        {name: &lt;span class=&quot;string&quot;&gt;&#x27;latency&#x27;&lt;/span&gt;, percentiles: [&lt;span class=&quot;number&quot;&gt;0.95&lt;/span&gt;]},
        &lt;span class=&quot;string&quot;&gt;&#x27;concurrency&#x27;&lt;/span&gt;,
        &lt;span class=&quot;string&quot;&gt;&#x27;request-bytes&#x27;&lt;/span&gt;,
        &lt;span class=&quot;string&quot;&gt;&#x27;response-bytes&#x27;&lt;/span&gt;
    ],
    requestGenerator: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(client)&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; client.request({method:&lt;span class=&quot;string&quot;&gt;&#x27;GET&#x27;&lt;/span&gt;, path: &lt;span class=&quot;string&quot;&gt;&#x27;/&#x27;&lt;/span&gt;});
    }
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a simple 3 minute stress test.
Your test will probably be a bit differnt, just have a look at &lt;a href=&quot;https://github.com/Samuel29/NodeStressSuite&quot;&gt;nss&lt;/a&gt; and my test for inspiration.&lt;/p&gt;
&lt;h3 id=&quot;do-some-testing&quot;&gt;Do some testing&lt;/h3&gt;
&lt;p&gt;Make &lt;code&gt;~/.aws&lt;/code&gt; to look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-json&quot;&gt;{
    &quot;&lt;span class=&quot;attribute&quot;&gt;key&lt;/span&gt;&quot;:&lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;BADWOLFBADWOLFBADWOLFBADWOLF&quot;&lt;/span&gt;&lt;/span&gt;,
    &quot;&lt;span class=&quot;attribute&quot;&gt;secret&lt;/span&gt;&quot;:&lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;BADWOLFBADWOLFBADWOLFBADWOLFBADWOLFBADWOLF&quot;&lt;/span&gt;&lt;/span&gt;,
    &quot;&lt;span class=&quot;attribute&quot;&gt;endpoint&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;us-west-2&quot;&lt;/span&gt;
&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Obviously, replace the Doctor Who reference with your AWS credentials, and set endpoint to your favorite zone (us-west-2: Portland, represent!) Make a keypair called &lt;code&gt;deploy&lt;/code&gt; and create a security-group called &lt;code&gt;loadtest&lt;/code&gt; that opens ports 22 (ssh) and 3000 (default test port.)&lt;/p&gt;
&lt;p&gt;So, now that we have a test setup, let’s spin-up a bunch of AWS instances to run it:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;loadtest --instances=5 jetboy.js&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will turn on 5 AWS instances, and wait for them, then send the test. You can view the output at &lt;a href=&quot;http://localhost:3000&quot;&gt;http://localhost:3000&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To see your available options, run &lt;code&gt;loadtest --help&lt;/code&gt;&lt;/p&gt;
</description>
		</item>

	    <item>
	    	<title>Automating TV torrent downloads</title>
	    	<link>http://blog.jetboystudio.com/articles/automated_tv/</link>
	    	<guid isPermaLink="true">http://blog.jetboystudio.com/articles/automated_tv/</guid>
	    	<pubDate>Mon, 15 Apr 2013 12:05:00 -0700</pubDate>
	    	<author></author>
	    	<description>&lt;p&gt;I want &lt;a href=&quot;/articles/nas/&quot;&gt;Stooge, my NAS&lt;/a&gt; to be able to keep track of my favorite shows, and download new episodes when they come out.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I made &lt;a href=&quot;https://github.com/konsumer/tvparty&quot;&gt;TV Party&lt;/a&gt; to do this exactly how I want, which is to say: no frills, simple REST API, easy to work with, and no dependencies other than node &amp;amp; npm-installed libs.&lt;/p&gt;
&lt;h2 id=&quot;installing-configuring-stuff&quot;&gt;Installing/Configuring Stuff&lt;/h2&gt;
&lt;p&gt;Make sure you &lt;a href=&quot;http://blog.jetboystudio.com/2013/02/03/update-node.html&quot;&gt;update node&lt;/a&gt;. After that, do this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;
&lt;span class=&quot;built_in&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;-s&lt;/span&gt;
git clone https://github.com/konsumer/tvparty.git /usr/local/share/tvparty &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; /usr/local/share/tvparty &amp;amp;&amp;amp; npm install&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;bam-&quot;&gt;bam!&lt;/h3&gt;
&lt;p&gt;Now, make &lt;code&gt;/usr/local/share/tvparty/conf/settings.json&lt;/code&gt; look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-json&quot;&gt;
{
    &quot;&lt;span class=&quot;attribute&quot;&gt;username&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;USER&quot;&lt;/span&gt;&lt;/span&gt;,
    &quot;&lt;span class=&quot;attribute&quot;&gt;password&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;PASSWORD&quot;&lt;/span&gt;&lt;/span&gt;,
    &quot;&lt;span class=&quot;attribute&quot;&gt;host&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;192.168.1.5&quot;&lt;/span&gt;&lt;/span&gt;,
    &quot;&lt;span class=&quot;attribute&quot;&gt;port&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;9091&quot;&lt;/span&gt;&lt;/span&gt;,
    &quot;&lt;span class=&quot;attribute&quot;&gt;updateTime&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;&lt;/span&gt;,
    &quot;&lt;span class=&quot;attribute&quot;&gt;serve_port&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;&lt;/span&gt;,
    &quot;&lt;span class=&quot;attribute&quot;&gt;add_dir&lt;/span&gt;&quot;:&lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;/share/video/series&quot;&lt;/span&gt;
&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run &lt;code&gt;node app.js&lt;/code&gt; and you can visit &lt;code&gt;http://localhost:{SERVE_PORT}/&lt;/code&gt; to mess with your subscriptions.&lt;/p&gt;
&lt;h3 id=&quot;booyah-&quot;&gt;booyah!&lt;/h3&gt;
&lt;p&gt;Now, we want this to run when Stooge starts up. He is running Ubuntu Server 12.10. Let’s copy &lt;code&gt;tvparty.init.sh&lt;/code&gt; to &lt;code&gt;/etc/init.d/tvparty&lt;/code&gt;. Now, add it to default start/stop: &lt;code&gt;update-rc.d tvparty defaults&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;wow-&quot;&gt;wow!&lt;/h3&gt;
</description>
		</item>

	    <item>
	    	<title>Making a Safari Extension to handle torrent clicks</title>
	    	<link>http://blog.jetboystudio.com/articles/safari-extension/</link>
	    	<guid isPermaLink="true">http://blog.jetboystudio.com/articles/safari-extension/</guid>
	    	<pubDate>Thu, 04 Apr 2013 06:15:00 -0700</pubDate>
	    	<author></author>
	    	<description>&lt;p&gt;&lt;a href=&quot;/articles/nas/&quot;&gt;Earlier&lt;/a&gt; I talked about my awesome media/storage server named “stooge”.  I want stooge to handle all the torrents on my network. I saw some good extensions for Firefox &amp;amp; Chrome, but not Safari. Since my new housemate prefers Mac Safari, I set out to make it awesome.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I just need one for Transmission WebUI, but the principle is the same for any other web-based torrent-thing.  Basically, I want to trigger a callback for the configured back-end (only transmission implemented) and send it a torrent when the user clicks on a torrent file or magnet link.&lt;/p&gt;
&lt;p&gt;If you just want to download and use it, click &lt;a href=&quot;/articles/safari-extension/TorrentAdder.safariextz&quot;&gt;here&lt;/a&gt;.  If you are curious how I made it, continue reading. This is a simple example to get get you started making Safari extensions.&lt;/p&gt;
&lt;p&gt;You can checkout my github project, &lt;a href=&quot;https://github.com/konsumer/torrentadder&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;step-1-rtfm&quot;&gt;Step 1: RTFM&lt;/h2&gt;
&lt;p&gt;I needed to figure out the Safari API.  &lt;a href=&quot;http://developer.apple.com/library/safari/#documentation/Tools/Conceptual/SafariExtensionGuide/Introduction/Introduction.html&quot;&gt;Go read it&lt;/a&gt;!  It’s a piece of cake.&lt;/p&gt;
&lt;h2 id=&quot;enable-your-tools&quot;&gt;Enable your tools&lt;/h2&gt;
&lt;p&gt;First, you will need a developer certificate. Do that &lt;a href=&quot;https://developer.apple.com/support/mac/developer-certificates.html&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you have not done any development on Safari, you may need to enable some stuff.  Here is what I did:&lt;/p&gt;
&lt;p&gt;Go to Safari/Preferences/Advanced, and enable the developer menu.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/safari-extension/safari1.png&quot; alt=&quot;develop menu&quot;&gt;&lt;/p&gt;
&lt;p&gt;Under new “Develop” menu in toolbar, go to “Show Extension Builder” and add a new extension.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/safari-extension/safari2.png&quot; alt=&quot;add extension&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;global-page&quot;&gt;Global Page&lt;/h2&gt;
&lt;p&gt;Safari extensions load most of their stuff in the global page file.  I added a file to the extension dir called &lt;code&gt;global.html&lt;/code&gt;. Mine looked like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
   &amp;lt;head&amp;gt;
      &amp;lt;script type=&amp;quot;text/javascript&amp;quot; charset=&amp;quot;utf-8&amp;quot;&amp;gt;
        // generic cross-origin AJAX function
        function ajax(method, url, data, cb, headers){
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = readystatechange;
            xhr.open(method, url);
            xhr.setRequestHeader(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/json&amp;quot;);

            if (headers){
                for(i in headers){
                    xhr.setRequestHeader(i, headers[i]);
                }
            }

            if (data){
                data = JSON.stringify(data);
            }

            xhr.send(data);

            function readystatechange(){
                if(this.readyState === this.DONE) {
                    if (this.status == 200){
                        if(this.getResponseHeader(&amp;quot;Content-Type&amp;quot;).split(&amp;quot;;&amp;quot;)[0] === &amp;quot;application/json&amp;quot;){
                            return cb(null, JSON.parse(this.response), this);
                        }else{
                            return cb(null, this.response, this);
                        }
                    }else{
                        return cb(this.status, this.response, this);
                    }
                }
            }
        }

        // pass console.log() to current window/tab end-script
        var console = {log: function(){
            safari.application.activeBrowserWindow.activeTab.page.dispatchMessage(&amp;quot;log&amp;quot;, arguments);
        }};

        var settings={};

        // global settings
        function settingsChanged(){
            settings = {
                client: safari.extension.settings.getItem(&amp;#39;client&amp;#39;),
                host: safari.extension.settings.getItem(&amp;#39;host&amp;#39;),
                port: safari.extension.settings.getItem(&amp;#39;port&amp;#39;),
                username: safari.extension.secureSettings.getItem(&amp;#39;username&amp;#39;),
                password: safari.extension.secureSettings.getItem(&amp;#39;password&amp;#39;)
            };
        }
        safari.extension.settings.addEventListener(&amp;quot;change&amp;quot;, settingsChanged, false);
        settingsChanged();

        // callbacks, keyed by client
        var add = {};

        add[&amp;quot;Transmission WebUI&amp;quot;] = function(torrent){
            var url = &amp;#39;http://&amp;#39; + settings.username + &amp;#39;:&amp;#39; + settings.password + &amp;#39;@&amp;#39; + settings.host + &amp;#39;:&amp;#39; + settings.port + &amp;#39;/transmission/rpc&amp;#39;;
            ajax(&amp;#39;POST&amp;#39;, url, {&amp;quot;method&amp;quot;: &amp;quot;torrent-add&amp;quot;, arguments:{&amp;quot;filename&amp;quot;: torrent}}, function(err, res, req){
                if (err){
                    if (err == 409){
                        add[&amp;quot;Transmission WebUI&amp;quot;].token = req.getResponseHeader(&amp;#39;X-Transmission-Session-Id&amp;#39;);
                        return add[&amp;quot;Transmission WebUI&amp;quot;](torrent);
                    }else{
                        console.log(&amp;#39;unknown err&amp;#39;, err);
                    }
                }
            }, {&amp;#39;X-Transmission-Session-Id&amp;#39;: add[&amp;quot;Transmission WebUI&amp;quot;].token});
        };

        safari.application.addEventListener(&amp;quot;message&amp;quot;,function(msg){
            switch(msg.name){
                case &amp;#39;addTorrent&amp;#39;:
                    add[settings.client](msg.message);
                    break;
                default:
                    return console.log(&amp;quot;unhandled global message: &amp;quot; + msg.name, msg);
            }
        }, false);

      &amp;lt;/script&amp;gt;
   &amp;lt;/head&amp;gt;
   &amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Basically, I add some utilities (cross-site AJAX, console.log()) settings handler (both onload, and onchange) and callbacks keyed by the client-name in preferences. Safari annoyingly requires you to pass messages around for different security contexts.  This means that &lt;code&gt;global.html&lt;/code&gt; can’t reach into DOM or console.log(), and injected scripts (more on that in a sec) can’t do cross-site AJAX, or directly access preferences. I made my global context able to console.log(), and respond to the message &lt;code&gt;addTorrent&lt;/code&gt;.  This means that injected start &amp;amp; end scripts can fire this, and it will be run in global context, and global can trigger &lt;code&gt;log&lt;/code&gt; message, and I can handle that in an injected script.&lt;/p&gt;
&lt;p&gt;Transmission requires &lt;code&gt;X-Transmission-Session-Id&lt;/code&gt; header token to prevent XSS, so I do some K-leet trickery with recursive calling, if it’s not set.&lt;/p&gt;
&lt;h2 id=&quot;injected-scripts&quot;&gt;Injected Scripts&lt;/h2&gt;
&lt;p&gt;I made a file called &lt;code&gt;end.js&lt;/code&gt; and set it in Extension Builder, under “End Scripts”. This file will replace all links with torrent functions, handle global &lt;code&gt;console.log()&lt;/code&gt;s&lt;/p&gt;
&lt;p&gt;&lt;code&gt;end.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// text for notification
var icon = &amp;quot;&amp;quot;;
var title = &amp;quot;Torrent&amp;quot;;

// click handler
var torrentClick = function(evt){
    evt.preventDefault();
    var href = this.href;

    var message = &amp;quot;Torrent added:&amp;quot; + href.split(&amp;#39;/&amp;#39;).pop();

    if (window.webkitNotifications.checkPermission() == 0) {
        window.webkitNotifications.createNotification(icon, title, message).show();
    }else{
        window.webkitNotifications.requestPermission(function(){
            window.webkitNotifications.createNotification(icon, title, message).show();
        });
    }
    safari.self.tab.dispatchMessage(&amp;quot;addTorrent&amp;quot;, href);
};

// add handler to all torrent links
var links = document.querySelectorAll(&amp;quot;a&amp;quot;);
for (i in links){
    if (links[i] &amp;amp;&amp;amp; links[i].getAttribute){
        var href = (links[i].getAttribute(&amp;#39;href&amp;#39;)+&amp;quot;&amp;quot;).split(&amp;#39;?&amp;#39;).shift();
        if (href &amp;amp;&amp;amp; (href.substring(0,7) === &amp;quot;magnet:&amp;quot; || href.substr(-8) === &amp;quot;.torrent&amp;quot;)){
            links[i].removeEventListener(&amp;quot;click&amp;quot;, torrentClick, false);
            links[i].addEventListener(&amp;quot;click&amp;quot;, torrentClick, false);
        }
    }
}

// handle events from global
safari.self.addEventListener(&amp;quot;message&amp;quot;, function(msg){
    switch(msg.name){
        case &amp;quot;log&amp;quot;: // handle global console logs
            return console.log(&amp;quot;global:&amp;quot;, msg.message);

        default: // unhandled
            return console.log(&amp;quot;tab: &amp;quot; + msg.name, msg);
    }
}, false);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see my handler for global page console.log()’s, at the end. Basically, the rest of this script replaces all links with torrentClick() function, which fires &lt;code&gt;addTorrent&lt;/code&gt; &amp;amp; sends an HTML5 notification. I do a &lt;code&gt;links[i].removeEventListener&lt;/code&gt; because I was seeing doubled-up click handlers for whatever reason. Sweet!&lt;/p&gt;
&lt;h2 id=&quot;preferences&quot;&gt;Preferences&lt;/h2&gt;
&lt;p&gt;I wanted some preferences for the user to configure the torrent back-end. Mine (in Extension Builder) looked like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/safari-extension/safari3.png&quot; alt=&quot;preferences&quot;&gt;&lt;/p&gt;
&lt;p&gt;As you can see, I am securely storing user/password. I currently only have 1 client available (Transmission WebUI), but if you look at &lt;code&gt;global.html&lt;/code&gt;, you can see how to add more, using &lt;code&gt;add&lt;/code&gt; callbacks, and you can also see how I messed with my settings. Sweet!&lt;/p&gt;
</description>
		</item>

	    <item>
	    	<title>Merging Multiple Partitions</title>
	    	<link>http://blog.jetboystudio.com/articles/mhddfs/</link>
	    	<guid isPermaLink="true">http://blog.jetboystudio.com/articles/mhddfs/</guid>
	    	<pubDate>Mon, 01 Apr 2013 16:43:00 -0700</pubDate>
	    	<author></author>
	    	<description>&lt;p&gt;&lt;a href=&quot;http://blog.jetboystudio.com/2013/03/19/nas.html&quot;&gt;Earlier&lt;/a&gt; I talked about my awesome media/storage server named “stooge”. I got 2 new 2TB SATA drives and wanted to merge them in a cool way without data-loss &amp;amp; reverse-usability and expense issues associated with other solutions like RAID &amp;amp; xfs.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;My focus is storage capacity, not primarily data integrity, but I want it to be fairly secure, too. I want to be able to recover things on a per-drive basis, if I get any problems, so striping the 2 drives together is not an option. Basically, here is what I want: I want partitions that can stand-alone on their own, meaning that if I take a drive out of stooge, I want the filesystem to be readable and portable. I want one big mount that has media and incoming files (my largest file-collections,) split between the 2. &lt;/p&gt;
&lt;h2 id=&quot;joining-drives&quot;&gt;Joining Drives&lt;/h2&gt;
&lt;p&gt; I started by looking into &lt;a href=&quot;http://en.wikipedia.org/wiki/UnionFS&quot;&gt;unionfs&lt;/a&gt;, which lets you mount seperate partitions as if they are one.  The problem is that it’s not balanced, so whichever partion is priority1 will just fill up. I thought maybe I could do some hackery around ctime at boot to move older files to priority2 drive, and priority1 drive does all the write operations in running-mode, but this seemed awfully hacky.  I then learned about &lt;a href=&quot;http://romanrm.ru/en/mhddfs&quot;&gt;mhddfs&lt;/a&gt; which allows something very similar to &lt;a href=&quot;http://en.wikipedia.org/wiki/UnionFS&quot;&gt;unionfs&lt;/a&gt; but balances on a file-structure level between multiple partitions. This is what I want.&lt;/p&gt;
&lt;h2 id=&quot;volume-mounts&quot;&gt;Volume mounts&lt;/h2&gt;
&lt;p&gt;My 2 volumes are ext4, so they have some journaling recovery options for data-security. Here are their &lt;code&gt;/etc/fstab&lt;/code&gt; entries. The options &lt;code&gt;nodev,noexec,nobootwait&lt;/code&gt; make them be storage-only (&lt;code&gt;nodev,noexec&lt;/code&gt;) I set nobootwait, so it will boot unattended, and I can ssh, even if the drives are funky. Your partitions are probably different. I used UUIDs &lt;code&gt;sudo blkid&lt;/code&gt; so it won’t mismount the wrong partition, but you can also use the dev name.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# /mnt/store1 on /dev/sda6
UUID=ac0b74b9-36e4-4897-9e44-53e397310681 /mnt/store1     ext4    nodev,noexec,nobootwait 0       2
# /mnt/store2 on /dev/sdb1
UUID=43db0993-98bd-4cfe-8243-9ab4b12271fd /mnt/store2     ext4    nodev,noexec,nobootwait 0       2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you haven’t made the directories yet, let’s do that &amp;amp; ensure the directory permissions are cool:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo mkdir /mnt/store1 /mnt/store2 /share
sudo chown nobody:nogroup /mnt/store1 /mnt/store2 /share
sudo chmod 6775 /mnt/store1 /mnt/store2 /share&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Empty out these dirs by moving files, if they have stuff before you mount. Now, mount them (or you can just reboot)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo mount /mnt/store1
sudo mount /mnt/store2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I double-checkled permissions of contained files/dirs, to ensure no probs, later:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo chown -R nobody:nogroup /mnt/store?
sudo chmod -R 775 /mnt/store?
sudo find /mnt/store? -type f -exec chmod 6664 {} +
sudo find /mnt/store? -type d -exec chmod 6775 {} +&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;mhddfs&quot;&gt;mhddfs&lt;/h2&gt;
&lt;p&gt;First, let’s install the needed tools:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install mhddfs&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we can test it out (your partitions are probably different):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo mhddfs /mnt/store1,/mnt/store2 /share -o allow_other,uid=65534,gid=65534&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should get something that looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mhddfs: directory &amp;#39;/mnt/store1&amp;#39; added to list
mhddfs: directory &amp;#39;/mnt/store2&amp;#39; added to list
mhddfs: mount to: /share
mhddfs: move size limit 4294967296 bytes&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sweet! 4TBs of semi-reliable data!&lt;/p&gt;
&lt;p&gt;I used &lt;code&gt;uid=65534,gid=65534&lt;/code&gt; to set mount perms to nobody:nogroup.&lt;/p&gt;
&lt;p&gt;Ok, let’s make it work on boot. Add this to fstab:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# unioned /share
mhddfs#/mnt/store1,/mnt/store2 /share fuse defaults,allow_other,uid=65534,gid=65534,mode=0775,nobootwait 0 0&lt;/code&gt;&lt;/pre&gt;
</description>
		</item>

	    <item>
	    	<title>Creating a media-enabled Ubuntu NAS</title>
	    	<link>http://blog.jetboystudio.com/articles/nas/</link>
	    	<guid isPermaLink="true">http://blog.jetboystudio.com/articles/nas/</guid>
	    	<pubDate>Tue, 19 Mar 2013 04:43:00 -0700</pubDate>
	    	<author></author>
	    	<description>&lt;p&gt;I wanted a media-server that would stream to any devices I have on my local network, and allow my housemates &amp;amp; I to download torrents and share files on a central shared machine.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I have a Wii that is jailbroken, and running WiiMC.  These instructions will also enable media-playing for XBOX360 &amp;amp; a PS3.  I also don’t really like Webmin, but wanted web-based administration to be simple, with advanced stuff requiring SSH. This tutorial can also give you an overview of quick debian-based server administration.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tamsonweston.com/wordpress/wp-content/uploads/stooge.jpg&quot; alt=&quot;Curly&quot;&gt;&lt;/p&gt;
&lt;p&gt;NAS-box’s name is “Stooge”. There are many like him, but his name is “Stooge”.&lt;/p&gt;
&lt;p&gt;He’s gonna be head-and-shoulders better than any ready-made device, fer reals. I made mine from a ultra-low-power microITX box I had laying around. Let’s go!&lt;/p&gt;
&lt;h2 id=&quot;get-stooge-talkin-on-your-network&quot;&gt;Get stooge talkin’ on your network&lt;/h2&gt;
&lt;h3 id=&quot;basic-software&quot;&gt;Basic software&lt;/h3&gt;
&lt;p&gt;First, I installed Ubuntu Server 12.10. Do this the normal way. Make sure you are hooked up to your network, and all drives are attached, and mount your massive storage partition on &lt;code&gt;/share&lt;/code&gt;. When you get to the “Software selection” (tasksel) menu, choose “OpenSSH server” and “Samba file server”. If you want to use LAMP for a “welcome” page &amp;amp; mysql for mediatomb, choose that, too.&lt;/p&gt;
&lt;h3 id=&quot;root-password&quot;&gt;Root password&lt;/h3&gt;
&lt;p&gt;Login as your primary user, and give yourself a root password:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo passwd root&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;share-directory&quot;&gt;Share Directory&lt;/h3&gt;
&lt;p&gt;Make a directory where you keep all your goodies.  I mounted a big drive in &lt;code&gt;/share&lt;/code&gt;. I also wanted permissions to not really be a problem. Since samba guest is nobody.nogroup, and I want all to be able to mess with stuff, I did it like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo mkdir -p /share/incoming/incomplete
sudo chown -R nobody.nogroup /share
sudo find /share -type f -exec chmod 6664 {} +
sudo find /share -type d -exec chmod 6775 {} +&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, everything in that dir will be totally read/writable to peeps with the right permissions, and have suid-bit set, so nobody.nogroup ends up owning it, and all files saved there have correct permissions.&lt;/p&gt;
&lt;h3 id=&quot;network&quot;&gt;Network&lt;/h3&gt;
&lt;p&gt;We need a reliable address to get to our server.  You can use a DNS, static DHCP lease (based on MAC) or a static IP on the NAS.&lt;/p&gt;
&lt;p&gt;I wanted my router to be aware of my domain-name (so people can type &lt;a href=&quot;http://stooge.local&quot;&gt;http://stooge.local&lt;/a&gt; into browser to see welcome page.) I also wanted to be able to move the address around from my router, and have it work for all &amp;amp; also be default on new linux setup on this box. I used DHCP, and setup a static lease on my router (which has a mini DNS server.) Another option would be to edit &lt;code&gt;/etc/network/interfaces&lt;/code&gt; on the NAS, and add a static IP, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;iface eth0 inet static
address 192.168.1.5
netmask 255.255.255.0
gateway 192.168.1.1 &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You already did this during the setup phase, if you set a static IP.&lt;/p&gt;
&lt;p&gt;Reboot, and you should be able to SSH to your new box from the comfort of your regular computer.&lt;/p&gt;
&lt;h2 id=&quot;install-stuff&quot;&gt;Install stuff&lt;/h2&gt;
&lt;p&gt;Before we start, lets just install everything we are going to need. I did this by SSHing to my NAS:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh stooge.local&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, I installed all the tools I would use to configure it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install swat mediatomb transmission-remote-cli transmission-daemon&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;transmission-torrents-&quot;&gt;Transmission (torrents)&lt;/h2&gt;
&lt;p&gt;I wanted everything to go into &lt;code&gt;/share/incoming/incomplete&lt;/code&gt;, and get moved to &lt;code&gt;/share/incoming&lt;/code&gt;, so people could tell that things aren’t done.&lt;/p&gt;
&lt;p&gt;Transmission will overwrite configuration, so stop it, first: &lt;code&gt;sudo stop transmission-daemon&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make your config (&lt;code&gt;sudo vim /etc/transmission-daemon/settings.json&lt;/code&gt;) looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    &amp;quot;rpc-username&amp;quot;: &amp;quot;YOUR_USER&amp;quot;,
    &amp;quot;rpc-password&amp;quot;: &amp;quot;SECRET&amp;quot;, 
    &amp;quot;alt-speed-down&amp;quot;: 50, 
    &amp;quot;alt-speed-enabled&amp;quot;: false, 
    &amp;quot;alt-speed-time-begin&amp;quot;: 540, 
    &amp;quot;alt-speed-time-day&amp;quot;: 127, 
    &amp;quot;alt-speed-time-enabled&amp;quot;: false, 
    &amp;quot;alt-speed-time-end&amp;quot;: 1020, 
    &amp;quot;alt-speed-up&amp;quot;: 50, 
    &amp;quot;bind-address-ipv4&amp;quot;: &amp;quot;0.0.0.0&amp;quot;, 
    &amp;quot;bind-address-ipv6&amp;quot;: &amp;quot;::&amp;quot;, 
    &amp;quot;blocklist-enabled&amp;quot;: true, 
    &amp;quot;blocklist-url&amp;quot;: &amp;quot;http://list.iblocklist.com/?list=nzldzlpkgrcncdomnttb&amp;amp;fileformat=p2p&amp;amp;archiveformat=gz&amp;quot;, 
    &amp;quot;cache-size-mb&amp;quot;: 4, 
    &amp;quot;dht-enabled&amp;quot;: true, 
    &amp;quot;download-dir&amp;quot;: &amp;quot;/share/incoming&amp;quot;, 
    &amp;quot;download-limit&amp;quot;: 100, 
    &amp;quot;download-limit-enabled&amp;quot;: 0, 
    &amp;quot;download-queue-enabled&amp;quot;: true, 
    &amp;quot;download-queue-size&amp;quot;: 5, 
    &amp;quot;encryption&amp;quot;: 1, 
    &amp;quot;idle-seeding-limit&amp;quot;: 30, 
    &amp;quot;idle-seeding-limit-enabled&amp;quot;: false, 
    &amp;quot;incomplete-dir&amp;quot;: &amp;quot;/share/incoming/incomplete&amp;quot;, 
    &amp;quot;incomplete-dir-enabled&amp;quot;: true, 
    &amp;quot;lpd-enabled&amp;quot;: false, 
    &amp;quot;max-peers-global&amp;quot;: 200, 
    &amp;quot;message-level&amp;quot;: 2, 
    &amp;quot;peer-congestion-algorithm&amp;quot;: &amp;quot;&amp;quot;, 
    &amp;quot;peer-limit-global&amp;quot;: 240, 
    &amp;quot;peer-limit-per-torrent&amp;quot;: 60, 
    &amp;quot;peer-port&amp;quot;: 51413, 
    &amp;quot;peer-port-random-high&amp;quot;: 65535, 
    &amp;quot;peer-port-random-low&amp;quot;: 49152, 
    &amp;quot;peer-port-random-on-start&amp;quot;: false, 
    &amp;quot;peer-socket-tos&amp;quot;: &amp;quot;default&amp;quot;, 
    &amp;quot;pex-enabled&amp;quot;: true, 
    &amp;quot;port-forwarding-enabled&amp;quot;: true, 
    &amp;quot;preallocation&amp;quot;: 1, 
    &amp;quot;prefetch-enabled&amp;quot;: 1, 
    &amp;quot;queue-stalled-enabled&amp;quot;: true, 
    &amp;quot;queue-stalled-minutes&amp;quot;: 30, 
    &amp;quot;ratio-limit&amp;quot;: 1, 
    &amp;quot;ratio-limit-enabled&amp;quot;: true, 
    &amp;quot;rename-partial-files&amp;quot;: true, 
    &amp;quot;rpc-authentication-required&amp;quot;: true, 
    &amp;quot;rpc-bind-address&amp;quot;: &amp;quot;0.0.0.0&amp;quot;, 
    &amp;quot;rpc-enabled&amp;quot;: true, 
    &amp;quot;rpc-port&amp;quot;: 9091, 
    &amp;quot;rpc-url&amp;quot;: &amp;quot;/transmission/&amp;quot;,
    &amp;quot;rpc-whitelist&amp;quot;: &amp;quot;127.0.0.1&amp;quot;, 
    &amp;quot;rpc-whitelist-enabled&amp;quot;: false, 
    &amp;quot;scrape-paused-torrents-enabled&amp;quot;: true, 
    &amp;quot;script-torrent-done-enabled&amp;quot;: false, 
    &amp;quot;script-torrent-done-filename&amp;quot;: &amp;quot;&amp;quot;, 
    &amp;quot;seed-queue-enabled&amp;quot;: false, 
    &amp;quot;seed-queue-size&amp;quot;: 10, 
    &amp;quot;speed-limit-down&amp;quot;: 100, 
    &amp;quot;speed-limit-down-enabled&amp;quot;: false, 
    &amp;quot;speed-limit-up&amp;quot;: 100, 
    &amp;quot;speed-limit-up-enabled&amp;quot;: false, 
    &amp;quot;start-added-torrents&amp;quot;: true, 
    &amp;quot;trash-original-torrent-files&amp;quot;: false, 
    &amp;quot;umask&amp;quot;: 18, 
    &amp;quot;upload-limit&amp;quot;: 100, 
    &amp;quot;upload-limit-enabled&amp;quot;: 0, 
    &amp;quot;upload-slots-per-torrent&amp;quot;: 14, 
    &amp;quot;utp-enabled&amp;quot;: true
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can set YOUR_USER &amp;amp; SECRET to whatever you want.  Feel free to play aroud with your settings, they are the same as regular Transmission. I actually just copied/pasted from a desktop version of Transmission that was all setup how I wanted.&lt;/p&gt;
&lt;h3 id=&quot;more-with-permissions&quot;&gt;More with Permissions&lt;/h3&gt;
&lt;p&gt;I add the transmission &amp;amp; mediatomb users to nogroup:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo adduser debian-transmission nogroup
sudo adduser mediatomb nogroup&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, they can write to the share directory.&lt;/p&gt;
&lt;h3 id=&quot;welcome-page&quot;&gt;Welcome page&lt;/h3&gt;
&lt;p&gt;I made a cute lil (responsive for easy phone-use) welcome page using PHP.  I wanted it to show freespace, and give local users all the info they need to connect.  I put a nice template &lt;a href=&quot;/articles/nas/nas-welcome.zip&quot;&gt;here&lt;/a&gt;. Extract it in &lt;code&gt;/var/www&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /var/www
wget http://blog.jetboystudio.com/articles/nas/nas-welcome.zip
unzip nas-welcome.zip
rm nas-welcome.zip&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You may need some &lt;code&gt;sudo&lt;/code&gt;‘s, if you don’t have write access to &lt;code&gt;/var/www&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make sure to change your transmission username &amp;amp; password.  All the other stuff uses javascript to fill in the right addresses. You can definitely add more features, like polling Transmission’s web-RPC to get info about running torrents, etc.  I didn’t need all that.&lt;/p&gt;
&lt;p&gt;You can see the page at &lt;a href=&quot;http://192.168.1.5/&quot;&gt;http://192.168.1.5/&lt;/a&gt; (if that is your NAS IP.)&lt;/p&gt;
&lt;p&gt;It gives you some links to plugins that will let you add torrents form your computer. Use the settings in the grey box on the top-right. Tested the chrome plugin &amp;amp; standalone, both worked great, just like a native client.&lt;/p&gt;
&lt;h3 id=&quot;samba-windows-networking-&quot;&gt;Samba (Windows Networking)&lt;/h3&gt;
&lt;p&gt;Visit your welcome page, and click “Samba” button.  When it asks you to login, use “root” and the password you set earlier.&lt;/p&gt;
&lt;p&gt;This is SWAT. It has a lot of options.  I basically setup 2 shares.  One is “share” which has everything in it, and points to &lt;code&gt;/share&lt;/code&gt; (my massive harddrive mount) and 1 for the web interface, that points to &lt;code&gt;/var/www&lt;/code&gt;, so I can very easily mess with the welcome page.  I made these both guest-access and browseable (no security, closed LAN.)&lt;/p&gt;
&lt;p&gt;If you don’t want to click around in SWAT, you can use mine. Save it as &lt;code&gt;/etc/samba/smb.conf&lt;/code&gt; on the NAS. Be sure to have a look at the global section, either way, as I added some nice speed-optimization flags, etc.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[global]
    server string = %h server (Samba, Ubuntu)
    map to guest = Bad Password
    obey pam restrictions = Yes
    pam password change = Yes
    passwd program = /usr/bin/passwd %u
    passwd chat = *Enter\snew\s*\spassword:* %n\n *Retype\snew\s*\spassword:* %n\n *password\supdated\ssuccessfully* .
    unix password sync = Yes
    syslog = 0
    log file = /var/log/samba/log.%m
    max log size = 1000
    min receivefile size = 65535
    max xmit = 65535
    max open files = 65535
    socket options = TCP_NODELAY IPTOS_LOWDELAY SO_SNDBUF=65535 SO_RCVBUF=65535
    dns proxy = No
    usershare allow guests = Yes
    panic action = /usr/share/samba/panic-action %d
    idmap config * : backend = tdb
    aio read size = 16384
    aio write size = 16384
    aio write behind = true
    max connections = 65535
    use sendfile = Yes

[share]
    comment = All shared stuff
    path = /share/
    read only = No
    guest ok = Yes

[web]
    comment = Website for this box
    path = /var/www
    read only = No
    guest ok = Yes&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;mediatomb-upnp-&quot;&gt;MediaTomb (UPnP)&lt;/h3&gt;
&lt;p&gt;Follow the directions &lt;a href=&quot;https://vanalboom.org/node/14&quot;&gt;here&lt;/a&gt; to get an easy transcode-everything setup for PS3/XBOX/VLC. Here is exactly how I did it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install mencoder ffmpeg mediainfo lsdvd&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then made my &lt;code&gt;/etc/mediatomb/config.xml&lt;/code&gt; look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;config version=&amp;quot;2&amp;quot; xmlns=&amp;quot;http://mediatomb.cc/config/2&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:schemaLocation=&amp;quot;http://mediatomb.cc/config/2 http://mediatomb.cc/config/2.xsd&amp;quot;&amp;gt;&amp;lt;!--
     Read /usr/share/doc/mediatomb-common/README.gz section 6 for more
     information on creating and using config.xml configration files.
    --&amp;gt;
  &amp;lt;server&amp;gt;
    &amp;lt;ui enabled=&amp;quot;yes&amp;quot; show-tooltips=&amp;quot;yes&amp;quot;&amp;gt;
      &amp;lt;accounts enabled=&amp;quot;yes&amp;quot; session-timeout=&amp;quot;30&amp;quot;&amp;gt;
        &amp;lt;account user=&amp;quot;YOUR_USER&amp;quot; password=&amp;quot;SECRET&amp;quot;/&amp;gt;
      &amp;lt;/accounts&amp;gt;
    &amp;lt;/ui&amp;gt;
    &amp;lt;name&amp;gt;Stooge&amp;lt;/name&amp;gt;
    &amp;lt;udn&amp;gt;uuid:e9a55b5a-a212-4957-9ed6-ec5b316ff609&amp;lt;/udn&amp;gt;
    &amp;lt;home&amp;gt;/var/lib/mediatomb&amp;lt;/home&amp;gt;
    &amp;lt;webroot&amp;gt;/usr/share/mediatomb/web&amp;lt;/webroot&amp;gt;
    &amp;lt;storage caching=&amp;quot;yes&amp;quot;&amp;gt;
      &amp;lt;sqlite3 enabled=&amp;quot;no&amp;quot;&amp;gt;
        &amp;lt;database-file&amp;gt;mediatomb.db&amp;lt;/database-file&amp;gt;
      &amp;lt;/sqlite3&amp;gt;
      &amp;lt;mysql enabled=&amp;quot;yes&amp;quot;&amp;gt;
        &amp;lt;host&amp;gt;localhost&amp;lt;/host&amp;gt;
        &amp;lt;username&amp;gt;mediatomb&amp;lt;/username&amp;gt;
        &amp;lt;database&amp;gt;mediatomb&amp;lt;/database&amp;gt;
      &amp;lt;/mysql&amp;gt;
    &amp;lt;/storage&amp;gt;
    &amp;lt;!-- For PS3 support change to &amp;quot;yes&amp;quot; --&amp;gt;
    &amp;lt;protocolInfo extend=&amp;quot;yes&amp;quot;/&amp;gt;
    &amp;lt;!--
       Uncomment the lines below to get rid of jerky avi playback on the
       DSM320 or to enable subtitles support on the DSM units
    --&amp;gt;
    &amp;lt;custom-http-headers&amp;gt;
      &amp;lt;add header=&amp;quot;X-User-Agent: redsonic&amp;quot;/&amp;gt;
    &amp;lt;/custom-http-headers&amp;gt;

    &amp;lt;manufacturerURL&amp;gt;redsonic.com&amp;lt;/manufacturerURL&amp;gt;
    &amp;lt;modelNumber&amp;gt;105&amp;lt;/modelNumber&amp;gt;

   &amp;lt;!-- Uncomment the line below if you have a Telegent TG100 --&amp;gt;&amp;lt;!--
       &amp;lt;upnp-string-limit&amp;gt;101&amp;lt;/upnp-string-limit&amp;gt;
    --&amp;gt;
    &amp;lt;extended-runtime-options&amp;gt;
      &amp;lt;ffmpegthumbnailer enabled=&amp;quot;yes&amp;quot;&amp;gt;
        &amp;lt;thumbnail-size&amp;gt;128&amp;lt;/thumbnail-size&amp;gt;
        &amp;lt;seek-percentage&amp;gt;5&amp;lt;/seek-percentage&amp;gt;
        &amp;lt;filmstrip-overlay&amp;gt;yes&amp;lt;/filmstrip-overlay&amp;gt;
        &amp;lt;workaround-bugs&amp;gt;no&amp;lt;/workaround-bugs&amp;gt;
      &amp;lt;/ffmpegthumbnailer&amp;gt;
      &amp;lt;mark-played-items enabled=&amp;quot;no&amp;quot; suppress-cds-updates=&amp;quot;yes&amp;quot;&amp;gt;
        &amp;lt;string mode=&amp;quot;prepend&amp;quot;&amp;gt;*&amp;lt;/string&amp;gt;
      &amp;lt;/mark-played-items&amp;gt;
    &amp;lt;/extended-runtime-options&amp;gt;
  &amp;lt;/server&amp;gt;
  &amp;lt;import hidden-files=&amp;quot;no&amp;quot;&amp;gt;
    &amp;lt;scripting script-charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
      &amp;lt;common-script&amp;gt;/usr/share/mediatomb/js/common.js&amp;lt;/common-script&amp;gt;
      &amp;lt;playlist-script&amp;gt;/usr/share/mediatomb/js/playlists.js&amp;lt;/playlist-script&amp;gt;
      &amp;lt;virtual-layout type=&amp;quot;builtin&amp;quot;&amp;gt;
        &amp;lt;import-script&amp;gt;/usr/share/mediatomb/js/import.js&amp;lt;/import-script&amp;gt;
        &amp;lt;dvd-script&amp;gt;/usr/share/mediatomb/js/import-dvd.js&amp;lt;/dvd-script&amp;gt;
      &amp;lt;/virtual-layout&amp;gt;
    &amp;lt;/scripting&amp;gt;
    &amp;lt;mappings&amp;gt;
    &amp;lt;extension-mimetype ignore-unknown=&amp;quot;no&amp;quot;&amp;gt;
        &amp;lt;map from=&amp;quot;mp3&amp;quot; to=&amp;quot;audio/mpeg&amp;quot;/&amp;gt;
        &amp;lt;map from=&amp;quot;wmv&amp;quot; to=&amp;quot;video/transcode&amp;quot;/&amp;gt;
        &amp;lt;map from=&amp;quot;flv&amp;quot; to=&amp;quot;video/transcode&amp;quot;/&amp;gt;
        &amp;lt;map from=&amp;quot;mkv&amp;quot; to=&amp;quot;video/transcode&amp;quot;/&amp;gt;
        &amp;lt;map from=&amp;quot;rm&amp;quot;  to=&amp;quot;video/transcode&amp;quot;/&amp;gt;
        &amp;lt;map from=&amp;quot;iso&amp;quot; to=&amp;quot;video/transcode&amp;quot;/&amp;gt;
        &amp;lt;map from=&amp;quot;ogm&amp;quot; to=&amp;quot;video/transcode&amp;quot;/&amp;gt;
        &amp;lt;map from=&amp;quot;mp4&amp;quot; to=&amp;quot;video/transcode&amp;quot;/&amp;gt; 
        &amp;lt;map from=&amp;quot;avi&amp;quot; to=&amp;quot;video/transcode&amp;quot;/&amp;gt;
      &amp;lt;/extension-mimetype&amp;gt;
      &amp;lt;mimetype-upnpclass&amp;gt;
        &amp;lt;map from=&amp;quot;audio/*&amp;quot; to=&amp;quot;object.item.audioItem.musicTrack&amp;quot;/&amp;gt;
        &amp;lt;map from=&amp;quot;video/*&amp;quot; to=&amp;quot;object.item.videoItem&amp;quot;/&amp;gt;
        &amp;lt;map from=&amp;quot;image/*&amp;quot; to=&amp;quot;object.item.imageItem&amp;quot;/&amp;gt;
      &amp;lt;/mimetype-upnpclass&amp;gt;
      &amp;lt;mimetype-contenttype&amp;gt;
        &amp;lt;treat mimetype=&amp;quot;audio/mpeg&amp;quot; as=&amp;quot;mp3&amp;quot;/&amp;gt;
        &amp;lt;treat mimetype=&amp;quot;video/transcode&amp;quot; as=&amp;quot;mpg&amp;quot;/&amp;gt;
      &amp;lt;/mimetype-contenttype&amp;gt;
   &amp;lt;/mappings&amp;gt;
    &amp;lt;online-content&amp;gt;&amp;lt;!-- Make sure to setup a transcoding profile for flv --&amp;gt;
      &amp;lt;YouTube enabled=&amp;quot;no&amp;quot; refresh=&amp;quot;28800&amp;quot; update-at-start=&amp;quot;no&amp;quot; purge-after=&amp;quot;604800&amp;quot; racy-content=&amp;quot;exclude&amp;quot; format=&amp;quot;flv&amp;quot; hd=&amp;quot;no&amp;quot;&amp;gt;
        &amp;lt;favorites user=&amp;quot;mediatomb&amp;quot;/&amp;gt;
        &amp;lt;standardfeed feed=&amp;quot;most_viewed&amp;quot; time-range=&amp;quot;today&amp;quot;/&amp;gt;
        &amp;lt;playlists user=&amp;quot;mediatomb&amp;quot;/&amp;gt;
        &amp;lt;uploads user=&amp;quot;mediatomb&amp;quot;/&amp;gt;
        &amp;lt;standardfeed feed=&amp;quot;recently_featured&amp;quot; time-range=&amp;quot;today&amp;quot;/&amp;gt;
      &amp;lt;/YouTube&amp;gt;
      &amp;lt;Weborama enabled=&amp;quot;no&amp;quot; refresh=&amp;quot;28800&amp;quot; update-at-start=&amp;quot;no&amp;quot;&amp;gt;
        &amp;lt;playlist name=&amp;quot;Active&amp;quot; type=&amp;quot;playlist&amp;quot; mood=&amp;quot;active&amp;quot;/&amp;gt;
        &amp;lt;playlist name=&amp;quot;Metal&amp;quot; type=&amp;quot;playlist&amp;quot;&amp;gt;
          &amp;lt;filter&amp;gt;
            &amp;lt;genres&amp;gt;metal&amp;lt;/genres&amp;gt;
          &amp;lt;/filter&amp;gt;
        &amp;lt;/playlist&amp;gt;
      &amp;lt;/Weborama&amp;gt;
      &amp;lt;AppleTrailers enabled=&amp;quot;no&amp;quot; refresh=&amp;quot;43200&amp;quot; update-at-start=&amp;quot;no&amp;quot; resolution=&amp;quot;640&amp;quot;/&amp;gt;
    &amp;lt;/online-content&amp;gt;
  &amp;lt;/import&amp;gt;
  &amp;lt;transcoding enabled=&amp;quot;yes&amp;quot;&amp;gt;
    &amp;lt;mimetype-profile-mappings&amp;gt;
      &amp;lt;transcode mimetype=&amp;quot;video/transcode&amp;quot; using=&amp;quot;multifunctional&amp;quot;/&amp;gt;
    &amp;lt;/mimetype-profile-mappings&amp;gt;
    &amp;lt;profiles&amp;gt;
      &amp;lt;profile name=&amp;quot;multifunctional&amp;quot; enabled=&amp;quot;yes&amp;quot; type=&amp;quot;external&amp;quot;&amp;gt;
        &amp;lt;mimetype&amp;gt;video/mpeg&amp;lt;/mimetype&amp;gt;
        &amp;lt;first-resource&amp;gt;yes&amp;lt;/first-resource&amp;gt;
        &amp;lt;agent command=&amp;quot;/usr/local/bin/mediatomb-multifunctional.sh&amp;quot; arguments=&amp;quot;%in %out&amp;quot;/&amp;gt;
        &amp;lt;buffer size=&amp;quot;102400&amp;quot; chunk-size=&amp;quot;51200&amp;quot; fill-size=&amp;quot;20480&amp;quot;/&amp;gt;
      &amp;lt;/profile&amp;gt;
    &amp;lt;/profiles&amp;gt;
 &amp;lt;/transcoding&amp;gt;
&amp;lt;/config&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make sure to replace &lt;code&gt;YOUR_USER&lt;/code&gt; &amp;amp; &lt;code&gt;SECRET&lt;/code&gt; &amp;amp; use the UUID that was originally in there in &lt;code&gt;&amp;lt;udn&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I used mysql instead of flakey sqlite, so I enabled all those options.  Make a mysql user &lt;code&gt;mediatomb&lt;/code&gt; with no password, and grant all permissions to local. I did this in phpmyadmin.&lt;/p&gt;
&lt;p&gt;I also made a &lt;code&gt;/usr/local/bin/mediatomb-multifunctional.sh&lt;/code&gt; that looked like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
#
# General all-covering MediaTomb transcoding script.
#
#############################################################################
# Edit the parameters below to suit your needs.
#############################################################################

# Subtitles imply transcoding; set to 1 to disable subtitle rendering.
# For divx this doesn&amp;#39;t matter much but for mp4, mkv and DVD it does.
DISABLESUBS=1

# Change this to enable different DVD subtitle languages.
SUBS=&amp;quot;nl,en&amp;quot;

# Change this line to set the average bitrate.
# Use something like 8000 for wired connections; lower to 2000 for wireless.
AVBIT=8000

# Change this line to set the maximum bitrate.
# Use something like 12000 for wired connections; lower to 5000 for wireless.
MVBIT=12000

# Change this line to set the MPEG audio bitrate in kbps. AC3 is fixed to 384.
AABIT=256

# Change this line to set your favourite subtitle font.
SFONT=&amp;quot;/etc/mediatomb/DejaVuSans.ttf&amp;quot;

# Change this line to set the size of subtitles. 20-25 is okay.
SUBSIZE=20

# Enable downscaling of transcoded content to 720 pixels wide (DVD format)?
DOWNSCALE=1

# If downscaling is enabled, anything over this width (pixels) will be downscaled.
MAXSIZE=900

# Enable logging to file?
LOGGING=1

# If logging is enabled, log to which file?
LOGFILE=&amp;quot;/var/log/mediatomb-transcode.log&amp;quot;

#############################################################################
# Do not change anything below this line.
#############################################################################
# Variables
#############################################################################

FILE=$1
VERSION=&amp;quot;0.12&amp;quot;

MENCODER=$(which mencoder)
MEDIAINFO=$(which mediainfo)
FFMPEG=$(which ffmpeg)
LSDVD=$(which lsdvd)
XML=$(which xmlstarlet)

M_TR_M=&amp;quot;-oac lavc -ovc lavc -of mpeg -lavcopts \
    abitrate=${AABIT}:vcodec=mpeg2video:keyint=1:vbitrate=${AVBIT}:\
    vrc_maxrate=${MVBIT}:vrc_buf_size=1835 \
    -mpegopts muxrate=12000 -af lavcresample=44100 &amp;quot;
M_TR_A=&amp;quot;-oac lavc -ovc copy -of mpeg -lavcopts \
    abitrate=${AABIT} -af lavcresample=44100 &amp;quot;
M_RE_M=&amp;quot;-oac copy -ovc copy -of mpeg -mpegopts format=dvd -noskip -mc 0 &amp;quot;
F_TR_M=&amp;quot;-acodec ac3 -ab 384k -vcodec copy -vbsf h264_mp4toannexb -f mpegts -y &amp;quot;
F_RE_M=&amp;quot;-acodec copy -vcodec copy -vbsf h264_mp4toannexb -f mpegts -y &amp;quot;
SUBOPTS=&amp;quot;-slang ${SUBS} &amp;quot;
SRTOPTS=&amp;quot;-font ${SFONT} -subfont-autoscale 0 \
    -subfont-text-scale ${SUBSIZE} -subpos 100 &amp;quot;
SIZEOPTS=&amp;quot;-vf harddup,scale=720:-2 &amp;quot;
NOSIZEOPTS=&amp;quot;-vf harddup &amp;quot;
S24FPS=&amp;quot;23.976&amp;quot;
S24OPT=&amp;quot;-ofps 24000/1001 &amp;quot;
S30FPS=&amp;quot;29.970&amp;quot;
S30OPT=&amp;quot;-ofps 30000/1001 &amp;quot;

VCODEC=&amp;quot;&amp;quot;
ACODEC=&amp;quot;&amp;quot;
VWIDTH=&amp;quot;&amp;quot;
VFPS=&amp;quot;&amp;quot;
QPEL=&amp;quot;&amp;quot;
AVCPROF=&amp;quot;&amp;quot;

OPTS=(&amp;quot;&amp;quot;)

declare -i MODE=0

#############################################################################
# Functions
#############################################################################

function log {
        if [ &amp;quot;${LOGGING}&amp;quot; == &amp;quot;1&amp;quot; ] ; then
                echo -e &amp;quot;$(date +&amp;#39;%Y/%m/%d %H:%m:%S&amp;#39;) \t $1&amp;quot; &amp;gt;&amp;gt; ${LOGFILE}
        fi
}

function mediainfo {
        MIOUT=$(mktemp /tmp/tmp.mediainfo.XXXXXX)
        log &amp;quot;Logging mediainfo XML to ${MIOUT}.&amp;quot;
        ${MEDIAINFO} --output=xml &amp;quot;${FILE}&amp;quot; &amp;gt; ${MIOUT}
        VCODEC=$(${XML} sel -t -m &amp;quot;.//track[@type=&amp;#39;Video&amp;#39;]&amp;quot; -v &amp;quot;Format&amp;quot; ${MIOUT} )
        ACODEC=$(${XML} sel -t -m &amp;quot;.//track[@type=&amp;#39;Audio&amp;#39;]&amp;quot; -v &amp;quot;Format&amp;quot; ${MIOUT} )
        VWIDTH=$(${XML} sel -t -m &amp;quot;.//track[@type=&amp;#39;Video&amp;#39;]&amp;quot; -v &amp;quot;Width&amp;quot; \ 
            ${MIOUT} | sed &amp;#39;s/ pixels//&amp;#39; )
        VFPS=$(${XML} sel -t -m &amp;quot;.//track[@type=&amp;#39;Video&amp;#39;]&amp;quot; -v &amp;quot;Frame_rate&amp;quot; \ 
            ${MIOUT} | sed &amp;#39;s/ fps//&amp;#39; )
        AVCPROF=$(${XML} sel -t -m &amp;quot;.//track[@type=&amp;#39;Video&amp;#39;]&amp;quot; -v &amp;quot;Format_profile&amp;quot; \
            ${MIOUT} | sed &amp;#39;s/[^0-9]//g&amp;#39; )
        QPEL=$(${XML} sel -t -m &amp;quot;.//track[@type=&amp;#39;Video&amp;#39;]&amp;quot; -v &amp;quot;Format_settings__QPel&amp;quot; \
            ${MIOUT} )
        log &amp;quot;Variables found: \
            ${VCODEC} | ${ACODEC} | ${VWIDTH} | ${VFPS} | ${AVCPROF} | ${QPEL} &amp;quot;
        rm -f ${MIOUT}
}

function tropts {
        if [ &amp;quot;${DOWNSCALE}&amp;quot; == &amp;quot;1&amp;quot; -a ${VWIDTH} -gt ${MAXSIZE} ] ; then
                log &amp;quot;Rescaling to 720 pixels wide.&amp;quot;
                OPTS+=(${SIZEOPTS})
        else
                log &amp;quot;Rescaling disabled or file within limits.&amp;quot;
                OPTS+=(${NOSIZEOPTS})
        fi
        if [ &amp;quot;${VFPS}&amp;quot; == &amp;quot;${S24FPS}&amp;quot; ] ; then
                log &amp;quot;Framerate adjusted for mencoder.&amp;quot;
                OPTS+=(${S24OPT})
        else if [ &amp;quot;${VFPS}&amp;quot; == &amp;quot;${S30FPS}&amp;quot; ] ; then
                log &amp;quot;Framerate adjusted for mencoder.&amp;quot;
                OPTS+=(${S30OPT})
        else
                log &amp;quot;Framerate acceptable for mencoder.&amp;quot;
        fi
        fi
}

function getmode {
        # Fixed case: DVD ISO.
        if [ &amp;quot;${FEXT}&amp;quot; == &amp;quot;ISO&amp;quot; ] ; then
                CHAPTER=$(${LSDVD} &amp;quot;${FILE}&amp;quot; | grep Longest | sed &amp;#39;s/.* //&amp;#39;)
                log &amp;quot;DVD iso image found: Longest chapter is ${CHAPTER}.&amp;quot;
                MODE+=${DISABLESUBS}1000000
                return 0
        fi
        # Fixed case: subtitle found: transcode by default.
        if [ &amp;quot;${DISABLESUBS}&amp;quot; == &amp;quot;0&amp;quot; -a -e &amp;quot;$(echo $FILE | sed &amp;#39;s/...$/sub/&amp;#39;)&amp;quot; ] ; then
                log &amp;quot;SRT subtitle found.&amp;quot;
                SUB=$(echo $FILE | sed &amp;#39;s/...$/sub/&amp;#39;)
                MODE+=100000
                return 0
        elif [ &amp;quot;${DISABLESUBS}&amp;quot; == &amp;quot;0&amp;quot; -a -e &amp;quot;$(echo $FILE | sed &amp;#39;s/...$/srt/&amp;#39;)&amp;quot; ] ; then
                log &amp;quot;SUB subtitle found.&amp;quot;
                SUB=$(echo $FILE | sed &amp;#39;s/...$/srt/&amp;#39;)
                MODE+=100000
                return 0
        fi

        log &amp;quot;No subtitles found, or subtitle rendering disabled.&amp;quot;
        mediainfo

        case ${VCODEC} in
        &amp;quot;AVC&amp;quot;)
                if [ &amp;quot;${AVCPROF}&amp;quot; -gt &amp;quot;41&amp;quot; ] ; then
                        # Cannot handle h.264 4.1+
                        MODE+=10000     
                else          
                        # We can handle the rest                          
                        MODE+=1         
                fi ;;
        &amp;quot;MPEG-4 Visual&amp;quot;)
                if [ &amp;quot;${QPEL}&amp;quot; == &amp;quot;No&amp;quot; ] ; then
                        # No QPEL: we could remux the video         
                        MODE+=100       
                else            
                        # QPEL: just transcode it all                        
                        MODE+=10000     
                fi ;;
        * )
                        # Transcode everything we don&amp;#39;t know
                        MODE+=10000 ;;  
        esac

        case ${ACODEC} in
        &amp;quot;AC-3&amp;quot; | &amp;quot;MPEG Audio&amp;quot; )      
                        # These should be wellknown                   
                        MODE+=1 ;;      
        * )
                if [ &amp;quot;${MODE}&amp;quot; -lt &amp;quot;100&amp;quot; ] ; then    
                        # If video is AVC, transcode audio in m2ts   
                        MODE+=10        
                else     
                        # Otherwise in other container                       
                        MODE+=1000      
                fi ;;
        esac

}

function processmode {
        log &amp;quot;Mode is ${MODE}.&amp;quot;
        if [ ! &amp;quot;${MODE}&amp;quot; -lt &amp;quot;10000000&amp;quot; ] ; then
                EXEC=&amp;quot;${MENCODER} -dvd-device&amp;quot;
                OPTS+=(dvd://${CHAPTER} ${M_RE_M} -o )
        elif [ ! &amp;quot;${MODE}&amp;quot; -lt &amp;quot;1000000&amp;quot; ] ; then
                EXEC=&amp;quot;${MENCODER} -dvd-device&amp;quot;
                OPTS+=(dvd://${CHAPTER} ${SUBOPTS} ${M_TR_M} -o )
        elif [ ! &amp;quot;${MODE}&amp;quot; -lt &amp;quot;100000&amp;quot; ] ; then
                EXEC=${MENCODER}
                tropts
                OPTS+=(${M_TR_M} -sub ${SUB} ${SRTOPTS} -o )
        elif [ ! &amp;quot;${MODE}&amp;quot; -lt &amp;quot;10000&amp;quot; ] ; then
                EXEC=${MENCODER}
                tropts
                OPTS+=(${M_TR_M} -o )
        elif [ ! &amp;quot;${MODE}&amp;quot; -lt &amp;quot;1000&amp;quot; ] ; then
                EXEC=${MENCODER}
                tropts
                OPTS+=(${M_TR_M} -o)
        elif [ ! &amp;quot;${MODE}&amp;quot; -lt &amp;quot;100&amp;quot; ] ; then
                EXEC=${MENCODER}
                OPTS+=(${M_TR_M} -o)
        elif [ ! &amp;quot;${MODE}&amp;quot; -lt &amp;quot;10&amp;quot; ] ; then
                EXEC=&amp;quot;${FFMPEG} -i&amp;quot;
                OPTS+=(${F_TR_M})
        elif [ ! &amp;quot;${MODE}&amp;quot; -lt &amp;quot;1&amp;quot; ] ; then
                EXEC=&amp;quot;${FFMPEG} -i&amp;quot;
                OPTS+=(${F_RE_M})
        else
                log &amp;quot;I&amp;#39;m sorry Dave, I&amp;#39;m afraid I can&amp;#39;t do mode=0.&amp;quot;
        fi
}

#############################################################################
# Main method
#############################################################################

log &amp;quot;Starting MediaTomb Multifunctional Transcoder (version ${VERSION}).&amp;quot;
FEXT=$(echo $FILE | sed &amp;#39;s/.*\.//&amp;#39; | tr [a-z] [A-Z])
log &amp;quot;${FEXT} file specified: \&amp;quot;${FILE}\&amp;quot;&amp;quot;

getmode
processmode

log &amp;quot;Starting exec:&amp;quot;
log &amp;quot;${EXEC} \&amp;quot;${FILE}\&amp;quot; ${OPTS[@]} ${2} &amp;amp;&amp;gt;/dev/null&amp;quot;
exec ${EXEC} &amp;quot;${FILE}&amp;quot; ${OPTS[@]} &amp;quot;${2}&amp;quot; &amp;amp;&amp;gt;/dev/null&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make sure to &lt;code&gt;chmod 755 /usr/local/bin/mediatomb-multifunctional.sh&lt;/code&gt; and reboot.&lt;/p&gt;
&lt;p&gt;Visit your NAS’s MediaTomb page (UPnP button) and add &lt;code&gt;/share&lt;/code&gt;, under “Filesystem”. Set the share to auto-update, timed (so SAMBA changes are propagated.)&lt;/p&gt;
&lt;h3 id=&quot;timemachine&quot;&gt;Timemachine&lt;/h3&gt;
&lt;p&gt;I am the only mac (hackintosh) on my network.  I followed &lt;a href=&quot;http://www.xdracco.net/time-machine-backup-volume-on-ubuntu-server/&quot;&gt;these&lt;/a&gt; directions to get it working.&lt;/p&gt;
&lt;p&gt;Wow! That was easy! Time to drink.&lt;/p&gt;
&lt;h2 id=&quot;moar-stuff&quot;&gt;Moar stuff&lt;/h2&gt;
&lt;h3 id=&quot;sparkleshare&quot;&gt;SparkleShare&lt;/h3&gt;
&lt;p&gt;If you want a privately hosted Dropbox, with no size limit, based on git, then this is your tool! I followed the directions on &lt;a href=&quot;http://sparkleshare.org/&quot;&gt;SparkeShare&lt;/a&gt; under “Setting up a host”, and now people who are not used to using git, or just want a local dropbox are all set!  An added bonus of the client is that it works with a lot of hosted git services, so I am editing this blog by just saving the file!&lt;/p&gt;
&lt;h3 id=&quot;lamp&quot;&gt;LAMP&lt;/h3&gt;
&lt;p&gt;If you want a local LAMP vhost setup, follow &lt;a href=&quot;http://blog.jetboystudio.com/2013/01/31/easy-dev-environment.html&quot;&gt;these instructions&lt;/a&gt;, and leave out the virtualbox stuff.  This will allow you and all your housemates to have a super-easy NAS-accessible LAMP-server, with no local virtualbox install! Put it all in /var/www, and it will be ready for the samba share.&lt;/p&gt;
&lt;h3 id=&quot;lan-cable-network&quot;&gt;LAN Cable Network&lt;/h3&gt;
&lt;p&gt;You can install a SAP server (&lt;code&gt;sudo apt-get install minisapserver&lt;/code&gt;) to install a streaming multicast LAN-only cable network! This will allow you to stream security cameras, your house’s toilet-cam channel, &lt;a href=&quot;http://www.youtube.com/watch?v=uE2M7g_IWSE&quot;&gt;Maoist progopanda&lt;/a&gt;, your Youtube channel, or whatevs to anyone who can view SAP (hint: VLC.) Holy crap! Haven’t played with this, but it’s gonna be awesome.&lt;/p&gt;
&lt;h3 id=&quot;itunes&quot;&gt;iTunes&lt;/h3&gt;
&lt;p&gt;You can add an endpoint/file-server for iTunes, if you hook your NAS up to your stereo by following &lt;a href=&quot;http://linuxhomeserverguide.com/mediaserver/firefly.php&quot;&gt;these&lt;/a&gt; instructions. On Ubuntu 12.10, I used &lt;code&gt;forked-daapd&lt;/code&gt; instead of &lt;code&gt;mt-daapd&lt;/code&gt;, and it had no web front-end (which is fine.) As of now, it is still updating the index (very slowly) so I dunno how cool this is, if your stereo ain’t hooked up to it. UPnP (in VLC) seems like a better option, upon initial playing. To be fair, I have never been a big iTunes fan.&lt;/p&gt;
</description>
		</item>

	    <item>
	    	<title>Turning a Teensy++ 2 into a full AVRISP-MKII clone (better)</title>
	    	<link>http://blog.jetboystudio.com/articles/teensy2AVRISP-MKII-lufa/</link>
	    	<guid isPermaLink="true">http://blog.jetboystudio.com/articles/teensy2AVRISP-MKII-lufa/</guid>
	    	<pubDate>Sun, 10 Feb 2013 18:00:00 -0800</pubDate>
	    	<author></author>
	    	<description>&lt;p&gt;&lt;a href=&quot;/articles/teensy2AVRISP-MKII/&quot;&gt;Previously&lt;/a&gt; I went through a lot of hoops to figure out how to compile a Teensy version of a burner for my XMEGA.  This is a simpler version of those instructions.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;And if you just want the hex file for teensy ++ 2, &lt;a href=&quot;/articles/teensy2AVRISP-MKII-lufa/AVRISP-MKII-AT90USB1286.hex.zip&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Install &lt;a href=&quot;http://www.obdev.at/products/crosspack/index.html&quot;&gt;CrossPack-AVR&lt;/a&gt; to give your Mac avr-gcc. if you are on another OS, install winavr or avr-gcc however you do that.&lt;/p&gt;
&lt;p&gt;Close terminal, and open a new one to refresh your environment.  Type &lt;code&gt;avr-gcc --version&lt;/code&gt; and you should see something liek this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;avr-gcc (GCC) 4.6.2
Copyright (C) 2011 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Download the &lt;a href=&quot;http://fourwalledcubicle.com/LUFA.php&quot;&gt;LUFA project&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Edit Projects/AVRISP-MKII/makefile. Change MCU like to look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-makefile&quot;&gt;&lt;span class=&quot;constant&quot;&gt;MCU&lt;/span&gt;          = at90usb1286&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CD to Projects/AVRISP-MKII/ and type &lt;code&gt;make&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;drag AVRISP-MKII.hex to your teensy burner window and press reset.&lt;/p&gt;
&lt;p&gt;Now, you have a AVRISP-MKII clone!&lt;/p&gt;
</description>
		</item>

	    <item>
	    	<title>Turning a Teensy++ 2 into a full AVRISP-MKII clone</title>
	    	<link>http://blog.jetboystudio.com/articles/teensy2AVRISP-MKII/</link>
	    	<guid isPermaLink="true">http://blog.jetboystudio.com/articles/teensy2AVRISP-MKII/</guid>
	    	<pubDate>Fri, 08 Feb 2013 10:00:00 -0800</pubDate>
	    	<author></author>
	    	<description>&lt;p&gt;&lt;em&gt;UPDATE&lt;/em&gt; see &lt;a href=&quot;/articles/teensy2AVRISP-MKII-lufa/&quot;&gt;this&lt;/a&gt; for simpler, cleaner, better directions.&lt;/p&gt;
&lt;p&gt;I needed a way to program the &lt;a href=&quot;https://www.sparkfun.com/products/9546&quot;&gt;XMEGA100 breakout board from Sparkfun&lt;/a&gt;, and didn’t have a “real programmer”.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I currently use ArduinoISP running on a bare ATMEGA328 chip to program other ATMEGA chips, and it works great. If you buy a &lt;a href=&quot;http://www.atmel.com/tools/AVRISPMKII.aspx&quot;&gt;AVRISP-MKII&lt;/a&gt;, it can do the same stuff, but also a special protocol (PDI) that the XMEGA board speaks, and TSI for small ATINY chips.&lt;/p&gt;
&lt;p&gt;I want to just get started with my project, and not have to wait for shipping, plus I have a lot of stuff around the house like microcontrollers &amp;amp; dev boards, and don;t want to buy something for such a specialized purpose. Surely, there must be something I could put together.&lt;/p&gt;
&lt;p&gt;I found &lt;a href=&quot;https://github.com/clockfort/Teensy-AVRISP-MKII&quot;&gt;this&lt;/a&gt; and I happen to have a Teensy++ 2 around, so I figured I was all set.  Had a look at the projects Makefile, and set paths up to use Arduino avr-gcc, etc.  Ran &lt;code&gt;make&lt;/code&gt;, and got this error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Lib/V2ProtocolParams.o: In function &#x60;V2Params_SetParameterValue&amp;#39;:
/Users/konsumer/Documents/Projects/Teensy-AVRISP-MKII/Lib/V2ProtocolParams.c:166: undefined reference to &#x60;eeprom_update_byte&amp;#39;
collect2: ld returned 1 exit status
make: *** [AVRISP-MKII.elf] Error 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;o dear!&lt;/p&gt;
&lt;p&gt;My first thought was maybe something was bad with Arduino version of avr-gcc toolset. I installed the excellent &lt;a href=&quot;http://www.obdev.at/products/crosspack/index.html&quot;&gt;CrossPack-AVR&lt;/a&gt; and restored the Makefile to pristine state. Closed my shell, and re-opened, ensured avr-gcc was in my path, and ran &lt;code&gt;make&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Hmm… Same deal.&lt;/p&gt;
&lt;p&gt;I started googling and found &lt;a href=&quot;https://groups.google.com/forum/#!msg/lufa-support/hp_R8QwHxH4/5UdPMbsjrmEJ&quot;&gt;this&lt;/a&gt;. I have a sweet-ass Win7 VirtualBox, so I can install the newest WinAVR and be happy.&lt;/p&gt;
&lt;p&gt;And that is what I did. Installed WinAVR, ran make, and got same error!&lt;/p&gt;
&lt;p&gt;Ack. &lt;a href=&quot;http://www.youtube.com/watch?v=7nrCvjg6nsI&quot;&gt;Hulk starting to get angry&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Better check windows version of avr-gcc&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;E:\Documents\Projects\Teensy-AVRISP-MKII&amp;gt;avr-gcc --version
avr-gcc (WinAVR 20100110) 4.3.3
Copyright (C) 2008 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Closed my Virtualbox in a wild fit of personal rage when I did this on my Mac:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;avr-gcc --version
avr-gcc (GCC) 4.6.2
Copyright (C) 2011 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s a newer version!  Hmm.  Maybe I should return to &lt;a href=&quot;https://groups.google.com/forum/#!searchin/lufa-support/shift$20count$20%3E=$20width$20of$20type/lufa-support/-aKtGElksQU/59NrmU-yrYYJ&quot;&gt;tha googlings&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I opened the makefile, and did a search for “linker”, and found this section:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-makefile&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#---------------- Linker Options ----------------&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;#  -Wl,...:     tell GCC to pass this to linker.&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;#    -Map:      create map file&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;#    --cref:    add cross reference to  map file&lt;/span&gt;
&lt;span class=&quot;constant&quot;&gt;LDFLAGS&lt;/span&gt;  = -Wl,-Map=&lt;span class=&quot;variable&quot;&gt;$(TARGET)&lt;/span&gt;.map,--cref
&lt;span class=&quot;constant&quot;&gt;LDFLAGS&lt;/span&gt; += -Wl,--relax 
&lt;span class=&quot;constant&quot;&gt;LDFLAGS&lt;/span&gt; += -Wl,--gc-sections
&lt;span class=&quot;constant&quot;&gt;LDFLAGS&lt;/span&gt; += &lt;span class=&quot;variable&quot;&gt;$(EXTMEMOPTS)&lt;/span&gt;
&lt;span class=&quot;constant&quot;&gt;LDFLAGS&lt;/span&gt; += &lt;span class=&quot;variable&quot;&gt;$(patsubst %,-L%,$(EXTRALIBDIRS)&lt;/span&gt;)
&lt;span class=&quot;constant&quot;&gt;LDFLAGS&lt;/span&gt; += &lt;span class=&quot;variable&quot;&gt;$(PRINTF_LIB)&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$(SCANF_LIB)&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$(MATH_LIB)&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;#LDFLAGS += -T linker_script.x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Added a line that looked like this after it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-makefile&quot;&gt;&lt;span class=&quot;constant&quot;&gt;LDFLAGS&lt;/span&gt; += -lavr51/libc.a&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hmm, after make, now I get&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Descriptors.c: At top level:
Descriptors.c:45:33: error: variable &amp;#39;DeviceDescriptor&amp;#39; must be const in order to be put into read-only section by means of &amp;#39;__attribute__((progmem))&amp;#39;
Descriptors.c:72:40: error: variable &amp;#39;ConfigurationDescriptor&amp;#39; must be const in order to be put into read-only section by means of &amp;#39;__attribute__((progmem))&amp;#39;
Descriptors.c:130:33: error: variable &amp;#39;LanguageString&amp;#39; must be const in order to be put into read-only section by means of &amp;#39;__attribute__((progmem))&amp;#39;
Descriptors.c:141:33: error: variable &amp;#39;ManufacturerString&amp;#39; must be const in order to be put into read-only section by means of &amp;#39;__attribute__((progmem))&amp;#39;
Descriptors.c:152:33: error: variable &amp;#39;ProductString&amp;#39; must be const in order to be put into read-only section by means of &amp;#39;__attribute__((progmem))&amp;#39;
Descriptors.c:162:33: error: variable &amp;#39;SerialString&amp;#39; must be const in order to be put into read-only section by means of &amp;#39;__attribute__((progmem))&amp;#39;
make: *** [Descriptors.o] Error 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Changed everything back to pristine, same prob, without &lt;code&gt;avr51/libc.a&lt;/code&gt; stuff. Wtf? Must have been something incomplete with my install. &lt;a href=&quot;http://www.youtube.com/watch?v=7nrCvjg6nsI&quot;&gt;Hulk starting to get angry, again&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Found &lt;a href=&quot;http://arduino.cc/forum/index.php/topic,66710.0.html&quot;&gt;this&lt;/a&gt; and thought maybe I should double check types. Added &lt;code&gt;const&lt;/code&gt; to code on Descriptors.c which had PROGMEM. Got to next file Lib/ISP/ISPTarget.c, did same.  Whoah!  It built.&lt;/p&gt;
&lt;p&gt;Fired up &lt;a href=&quot;http://www.pjrc.com/teensy/loader_mac.html&quot;&gt;Ye olde teensy loader&lt;/a&gt; and burnt that shit.&lt;/p&gt;
&lt;p&gt;Unplugged it, and plugged it in. Open “System Report” (apple/about this mac/more info) and this what it had to say:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;LUFA AVRISP MkII Clone:

  Product ID:    0x2104
  Vendor ID:    0x03eb  (Atmel Corporation)
  Version:     2.00
  Serial Number:    0000A00128255
  Speed:    Up to 12 Mb/sec
  Manufacturer:    Dean Camera
  Location ID:    0x1d110000 / 7
  Current Available (mA):    500
  Current Required (mA):    Unknown (Device has not been configured)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dang! So happy. &lt;a href=&quot;http://www.youtube.com/watch?v=VazV36eWHLc&quot;&gt;Life is rad&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want the hex for your own Teensy++ 2, &lt;a href=&quot;/articles/teensy2AVRISP-MKII/teensy_avrisp-mk2.zip&quot;&gt;here&lt;/a&gt; it is. Now you don’t have to bother with all this silly bizness.&lt;/p&gt;
&lt;p&gt;Looks like I may need to do something with that ‘Unknown (Device has not been configured)’ bit. dunno.&lt;/p&gt;
</description>
		</item>

	    <item>
	    	<title>Dev Tools</title>
	    	<link>http://blog.jetboystudio.com/articles/tools/</link>
	    	<guid isPermaLink="true">http://blog.jetboystudio.com/articles/tools/</guid>
	    	<pubDate>Thu, 07 Feb 2013 06:30:00 -0800</pubDate>
	    	<author></author>
	    	<description>&lt;p&gt;I am very particular about my environment. It’s not Mac-specific things. I use a cross-platform text-editor &lt;a href=&quot;http://www.sublimetext.com/2&quot;&gt;Sublime Text 2&lt;/a&gt; and you can use/add bash on any OS/computer. It’s specific interfacey things, like keys in the terminal, and the tools installed.&lt;/p&gt;
&lt;h2 id=&quot;sublime-text&quot;&gt;Sublime Text&lt;/h2&gt;
&lt;p&gt;This is a solid cross-platform editor (works the same in Linux, Windows and Mac.) It has a lot of features, and a lot of packages to extend it’s functionality.  It’s easy to write new packages, too, using python.&lt;/p&gt;
&lt;p&gt;One of the things I like the most about it is that although it has a menu, you can hit the action key combo (⌘-SHIFT-P) and you have access to every command available.&lt;/p&gt;
&lt;h3 id=&quot;sublime-text-3&quot;&gt;Sublime Text 3&lt;/h3&gt;
&lt;p&gt;The beta is here: &lt;a href=&quot;http://www.sublimetext.com/3&quot;&gt;Sublime Text 3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I couldn’t get a few packages installing correct, so I think I will hold off on ST3, for now, until Package Manager is better in sync.&lt;/p&gt;
&lt;p&gt;It’s a paid upgrade from Sublime Text 2, after the beta, but you can try it out now if you are a daring &amp;amp; licensed ST2 user.&lt;/p&gt;
&lt;h4 id=&quot;packages&quot;&gt;Packages&lt;/h4&gt;
&lt;p&gt;Here is how you install it, if you want to try:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd &amp;quot;$HOME/Library/Application Support/Sublime Text 3/Packages/&amp;quot;
git clone https://github.com/wbond/sublime_package_control.git &amp;quot;Package Control&amp;quot;
cd &amp;quot;Package Control&amp;quot;
git checkout python3&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;sublime-text-2&quot;&gt;Sublime Text 2&lt;/h3&gt;
&lt;p&gt;Stable version here: &lt;a href=&quot;http://www.sublimetext.com/2&quot;&gt;Sublime Text 2&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;packages&quot;&gt;Packages&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Open editor and hit Ctrl-&#x60; (like ~ in Doom/Quake) to open a python console.  In it, paste this:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;lang-python&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; urllib2,os; pf=&lt;span class=&quot;string&quot;&gt;&#x27;Package Control.sublime-package&#x27;&lt;/span&gt;; ipp=sublime.installed_packages_path(); os.makedirs(ipp) &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; os.path.exists(ipp) &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;; urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler())); open(os.path.join(ipp,pf),&lt;span class=&quot;string&quot;&gt;&#x27;wb&#x27;&lt;/span&gt;).write(urllib2.urlopen(&lt;span class=&quot;string&quot;&gt;&#x27;http://sublime.wbond.net/&#x27;&lt;/span&gt;+pf.replace(&lt;span class=&quot;string&quot;&gt;&#x27; &#x27;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#x27;%20&#x27;&lt;/span&gt;)).read()); print(&lt;span class=&quot;string&quot;&gt;&#x27;Please restart Sublime Text to finish installation&#x27;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;installing-packages&quot;&gt;Installing Packages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Restart sublime, and you have access to a crap-ton of packages.&lt;/li&gt;
&lt;li&gt;Hit ⌘-SHIFT-P to bring up a list of all available commands.&lt;/li&gt;
&lt;li&gt;Start typing “Install” until you see the “Install Package” option, hit ENTER.&lt;/li&gt;
&lt;li&gt;Install anything you need. Just start typing what you do (“HTML”, “CSS”, “javascript”, “node”, color”, etc)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are some packages I use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Processing&lt;/li&gt;
&lt;li&gt;AVR-ASM-Sublime&lt;/li&gt;
&lt;li&gt;M68K Assembly&lt;/li&gt;
&lt;li&gt;Arduino&lt;/li&gt;
&lt;li&gt;NESASM&lt;/li&gt;
&lt;li&gt;HexViewer&lt;/li&gt;
&lt;li&gt;SideBarGit&lt;/li&gt;
&lt;li&gt;DocBlockr&lt;/li&gt;
&lt;li&gt;Gitignore&lt;/li&gt;
&lt;li&gt;ColorPicker&lt;/li&gt;
&lt;li&gt;Open Folder&lt;/li&gt;
&lt;li&gt;HextoASCII&lt;/li&gt;
&lt;li&gt;SideBarEnhancements&lt;/li&gt;
&lt;li&gt;Color Highlighter&lt;/li&gt;
&lt;li&gt;JsFormat&lt;/li&gt;
&lt;li&gt;CMake&lt;/li&gt;
&lt;li&gt;URLEncode&lt;/li&gt;
&lt;li&gt;AMDtools&lt;/li&gt;
&lt;li&gt;Markdown Preview&lt;/li&gt;
&lt;li&gt;LESS-build&lt;/li&gt;
&lt;li&gt;SASS build&lt;/li&gt;
&lt;li&gt;Parallel Builder&lt;/li&gt;
&lt;li&gt;LoremIpsum&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Basically, once installed, just hit ⌘-SHIFT-P, start typing the name. Obviously, you won;t need these, and will need others.  Just use teh package manager to find what you need.  Be sure to search for them on google and read about them. They are all pretty awesome, and these are my choices when there are multiple ways to do the same thing (I have tested them all.)&lt;/p&gt;
&lt;h2 id=&quot;chrome&quot;&gt;Chrome&lt;/h2&gt;
&lt;p&gt;I install these extensions for development:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/window-resizer/kkelicaakdanhinjdeammmilcgefonfh&quot;&gt;Window Resizer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/chromevox/kgejglhpjiefppelpmljglcjbhoiplfn&quot;&gt;ChromeVox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/chrome-daltonize/efeladnkafmoofnbagdbfaieabmejfcf&quot;&gt;Chrome Daltonize&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh&quot;&gt;YSlow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/hasher/kignjplbjlocolcfldfhbonmbblpfbjb&quot;&gt;Hasher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/sass-inspector/lkofmbmllpgfbnonmnenkiakimpgoamn&quot;&gt;SASS Inspector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/live-css-mod/pcfngkdgaccedbamgamojgomaibafdcg&quot;&gt;Live CSS Mod&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mostly, I leave them disabled, and just enable what I need, when I need it.&lt;/p&gt;
&lt;h2 id=&quot;drupal&quot;&gt;Drupal&lt;/h2&gt;
&lt;p&gt;For drupal, I use devel, drush, and features on every site. I use &lt;a href=&quot;http://drupal.org/node/670460&quot;&gt;site definitions&lt;/a&gt; to deploy files/sql to target systems.&lt;/p&gt;
&lt;h2 id=&quot;keys&quot;&gt;Keys&lt;/h2&gt;
&lt;p&gt;I am often frustrated with the default keybindings on a Mac. Home, End, PageUp &amp;amp; PageDown do not work the way I think they should in terminal or text editors.&lt;/p&gt;
&lt;p&gt;Let’s fix them.&lt;/p&gt;
&lt;p&gt;In programs, I want Home/End to apply to a line, not the document (like Win/Linux.) &lt;a href=&quot;http://mwholt.blogspot.com/2012/09/fix-home-and-end-keys-on-mac-os-x.html&quot;&gt;Here&lt;/a&gt; is how.&lt;/p&gt;
&lt;p&gt;Terminal works a little different. &lt;a href=&quot;http://fplanque.com/dev/mac/mac-osx-terminal-page-up-down-home-end-of-line&quot;&gt;Here&lt;/a&gt; is instructions for editing terminal keybindings.&lt;/p&gt;
</description>
		</item>

	    <item>
	    	<title>How to quickly fix a mis-named user</title>
	    	<link>http://blog.jetboystudio.com/articles/fix-user/</link>
	    	<guid isPermaLink="true">http://blog.jetboystudio.com/articles/fix-user/</guid>
	    	<pubDate>Wed, 06 Feb 2013 13:55:00 -0800</pubDate>
	    	<author></author>
	    	<description>&lt;p&gt;Recently, I was setting up an Ubuntu VirtualMachine, and drukenly mistyped the primary username.&lt;/p&gt;
&lt;p&gt;This is pretty easy to fix very quickly, thought I would share.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;First, boot GRUB into recovery-mode, and choose root-shell from menu.&lt;/p&gt;
&lt;p&gt;We need to find out what I drunkenly typed, and fix it by moving the user to what I meant.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mount -o rw,remount /
cat /etc/passwd&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At the end, I saw &lt;code&gt;&amp;quot;konsmuer:x:1000:1000:David Konsumer,,,:/home/konsmuer:/bin/bash&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;konsmuer&lt;/code&gt; should be &lt;code&gt;konsumer&lt;/code&gt;. Oh dear!&lt;/p&gt;
&lt;p&gt;At this point, I can pretend I am French (pronounced “kon sew mway”), and just leave it. Now that I know how it’s spelled, I could login with my new name, or I can fix it. I think you know what I did next.&lt;/p&gt;
&lt;p&gt;Now for the fancy replacement:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /etc
# gives list of files to change - check these
grep -R konsmuer

# do change, automatically
for i in &#x60;grep -R konsmuer -l .&#x60;; do
    sed -i &amp;#39;s/konsmuer/konsumer/g&amp;#39; $i
done&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means “find all files that have ‘konsmuer’, and in-place modify them with sed using a search/replace for ‘konsumer’”.&lt;/p&gt;
&lt;p&gt;If you messed up typing the password too, type this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;passwd konsumer&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lastly, let’s move yer home dir:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mv /home/konsmuer /home/konsumer&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, reboot, and you can login with your corrected user.&lt;/p&gt;
</description>
		</item>

	    <item>
	    	<title>updated node.js on Ubuntu</title>
	    	<link>http://blog.jetboystudio.com/articles/update-node/</link>
	    	<guid isPermaLink="true">http://blog.jetboystudio.com/articles/update-node/</guid>
	    	<pubDate>Sun, 03 Feb 2013 12:58:00 -0800</pubDate>
	    	<author></author>
	    	<description>&lt;p&gt;I was having funny little issues on Ubuntu 12.10 64bit, and realized that it was using a really old version of node.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I installed a new one like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;sudo&lt;/span&gt; apt-get install python-software-properties software-properties-common python-software-properties
&lt;span class=&quot;built_in&quot;&gt;sudo&lt;/span&gt; add-apt-repository ppa:chris-lea/node.js
&lt;span class=&quot;built_in&quot;&gt;sudo&lt;/span&gt; apt-get update
&lt;span class=&quot;built_in&quot;&gt;sudo&lt;/span&gt; apt-get install python g++ make nodejs npm&lt;/code&gt;&lt;/pre&gt;
</description>
		</item>

	    <item>
	    	<title>Gameboy development environment</title>
	    	<link>http://blog.jetboystudio.com/articles/gameboy-dev-environment/</link>
	    	<guid isPermaLink="true">http://blog.jetboystudio.com/articles/gameboy-dev-environment/</guid>
	    	<pubDate>Thu, 31 Jan 2013 16:30:00 -0800</pubDate>
	    	<author></author>
	    	<description>&lt;p&gt;I do a lot of weird code stuff.  Recently, I was writing a &lt;a href=&quot;https://github.com/konsumer/dkart&quot;&gt;ROM for a Gameboy hardware-platform&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is how I set it up my dev environment on Mac OS 10.8.2.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;A lot of “old-timers” I talked to would have serious issues with my advice, but this made my preferred language work on my preferred OS using good tools, with as little fuss as possible. I am an older-timer, and I think it’s good advice, as a general problem-solving approach.&lt;/p&gt;
&lt;p&gt;I shouldn’t have to use ASM, in Windows 98 to get things working the way I want. This is 2013, for God’s sake. Let’s try something better.&lt;/p&gt;
&lt;p&gt;First install Xcode, so you can compile stuff. Install the command-line tools (fuzzy on this, did it a long time ago.)&lt;/p&gt;
&lt;p&gt;Basically “make” and “gcc” should be in your path.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GBDK: I downloaded a &lt;a href=&quot;http://www.rpgmaker.it/proflame/gbdk.zip&quot;&gt;pre-compiled version&lt;/a&gt;, and extracted to /opt/gbdk&lt;/li&gt;
&lt;li&gt;RGBDS: I used &lt;a href=&quot;http://github.com/bentley/rgbds/&quot;&gt;rgdbs-linux&lt;/a&gt;, and just ran &lt;code&gt;make&lt;/code&gt;, seemed to work great. copied the whole folder into opt, so it was with the gbdk.&lt;/li&gt;
&lt;li&gt;Emulator: I used visualboy advance. It doesn’t have a debugger, but seems to run games ok. it associates with .gb and .gbc ROM files.&lt;/li&gt;
&lt;li&gt;DOS tools: I got the wave tool and Advanced PCX2GB from &lt;a href=&quot;http://www.yvan256.net/projects/gameboy&quot;&gt;dos-tools&lt;/a&gt; extract them to /opt/dos&lt;/li&gt;
&lt;li&gt;Windows Tools: I installed &lt;a href=&quot;http://winebottler.kronenberg.org/&quot;&gt;Wine Bottler&lt;/a&gt; and got no$gmb (32bit version, without sound) and all the windows tools from &lt;a href=&quot;http://www.devrs.com/gb/hmgd/supp.html&quot;&gt;Windows Tools&lt;/a&gt; to run, in a single prefix. This adds color image map/tile support, font support and more. no$gmb has a debugger, which is pretty rad, but I couldn’t get the sound working. I bottled all the apps, so they have nice icons, and installed them all to one winebottler prefix, to save space. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, install &lt;a href=&quot;http://www.dosbox.com/&quot;&gt;DOSBox&lt;/a&gt; and add a mount command &amp;amp; tools to path in your autoexec. Do this by editing the bottom of ~/Library/Preferences/DOSBox 0.73 Preferences to look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@echo off
mount H /Users/konsumer
mount D /opt/dos
set PATH=D:\;%PATH%&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Replace “konsumer” with your username. Now you have access to your home dir (H:) &amp;amp; dostools (in path, D:)&lt;/p&gt;
&lt;p&gt;I keep my projects in &lt;code&gt;~/Documents/Projects&lt;/code&gt;. Here is how I make an image:&lt;/p&gt;
&lt;p&gt;use gimp to make a PCX image 160x144 named in Documents/Projects/coolgame/logo.pcx
fire up dosbox&lt;/p&gt;
&lt;p&gt;type these:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;H:
cd Documents/Projects/coolgame
pcx2gb o d logo.pcx logo_tile.c logo_map.c&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Looking at &lt;a href=&quot;http://www.dosbox.com/wiki/Usage&quot;&gt;DOSBox Usage&lt;/a&gt; I think you could add stuff that works from command-line, directly, but I didn’t bother (it’s not super-common that I need to make images or whatever.)&lt;/p&gt;
&lt;p&gt;Then, I made a directory with a Makefile that looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-makefile&quot;&gt;&lt;span class=&quot;constant&quot;&gt;GBDK&lt;/span&gt; = /opt/gbdk
&lt;span class=&quot;constant&quot;&gt;CC&lt;/span&gt;   = ${GBDK}/bin/lcc -Wa-l -Wl-m -Wl-j
&lt;span class=&quot;constant&quot;&gt;RGB&lt;/span&gt; = /opt/rgbds/rgbfix

&lt;span class=&quot;constant&quot;&gt;BINS&lt;/span&gt;   = mygame.gb

all:   $(BINS)

%.o:   %.c
   $(CC) -c -o $@ $&amp;lt;

%.s:   %.c
   $(CC) -S -o $@ $&amp;lt;

%.o:   %.s
   $(CC) -c -o $@ $&amp;lt;

%.gb:   %.o
   $(CC) -o $@ $&amp;lt;

%.gbc:   %.o
   $(CC) -o $@ $&amp;lt; &amp;amp;&amp;amp; ${RGB} -vcs -l 0x33 -p 0 $@

&lt;span class=&quot;title&quot;&gt;clean:&lt;/span&gt;
   rm -f *.o *.lst *.map *.gb *.gbc *~ *.rel *.cdb *.ihx *.lnk *.sym *.asm&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make a file called mygame.c, that looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-c&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#include &amp;lt;gb/gb.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;preprocessor&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span class=&quot;preprocessor&quot;&gt;#include &quot;logo_tile.c&quot;&lt;/span&gt;
&lt;span class=&quot;preprocessor&quot;&gt;#include &quot;logo_map.c&quot;&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; main() {
    &lt;span class=&quot;comment&quot;&gt;// load logo&lt;/span&gt;
    set_bkg_data(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;, tiledata);
    VBK_REG = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;
    VBK_REG = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;
    set_bkg_tiles(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;, tilemap);
    SHOW_BKG;
    DISPLAY_ON;

    waitpad(J_START);

    printf(&lt;span class=&quot;string&quot;&gt;&quot; \n\n\n\n\n\n\n\nYour game goes here.\n&quot;&lt;/span&gt;);
    waitpad(J_START);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, you can run &lt;code&gt;make&lt;/code&gt;, and it will compile mygame.c to mygame.gb. This is a basic boilerplate, you can do lots of other stuff, read docs on rgbfix for setting ROM title, etc.&lt;/p&gt;
&lt;p&gt;As a sidenote, I used Sublime Text 2, a great code editor. You should get something that syntax-highlights.&lt;/p&gt;
&lt;p&gt;It’s also handy if you have a bunch of c files, you can run:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;make testsound.gb&lt;/code&gt;, and it will compile testsound.c to testsound.gb&lt;/p&gt;
&lt;p&gt;type &lt;code&gt;open mygame.gb&lt;/code&gt; to run it.&lt;/p&gt;
&lt;p&gt;You just made yer first gameboy game. Yer an “old-timer”.&lt;/p&gt;
</description>
		</item>

	    <item>
	    	<title>Easy dev environment, on any computer</title>
	    	<link>http://blog.jetboystudio.com/articles/easy-dev-environment/</link>
	    	<guid isPermaLink="true">http://blog.jetboystudio.com/articles/easy-dev-environment/</guid>
	    	<pubDate>Thu, 31 Jan 2013 15:02:00 -0800</pubDate>
	    	<author></author>
	    	<description>&lt;p&gt;If you are like me, you want a full LAMP stack on your box while developing, and don’t want it to mess with your other stuff.&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;WAMP &amp;amp; MAMP are ok, I guess, but tend to have little oddities that make them act funny/broken, or they mess with other system files, which I hate. Linux is pretty light, in a vbox totally self-contained, and is a real version of what you  will eventually be deploying on (Linux rules!)&lt;/li&gt;
&lt;li&gt;I wanna slick-ass setup, that requires no config for new projects (drunken dev-site-launches, lets go!)&lt;/li&gt;
&lt;li&gt;I don’t want to have to SSH into my local vhost, I just wanna make web-stuff and have it work without thought.&lt;/li&gt;
&lt;li&gt;I want to do this all while drunk. If I get wasted in the process, and it fails, then it is too complicated for the inexperienced, when I haven’t had my coffee in the morning, or when I am (as now) wasted.  This is unacceptable. We are rarely at 100%.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I am running Mac Mountain Lion 10.8.2 on a Hackintosh. These directions should apply to any host OS, including Linux Windows, and Mac. My Hackintosh is a tricky little power-beast, but you don’t really need all that.  Any system that can run VirtualBox and blast tunes should be A-OK.&lt;/p&gt;
&lt;p&gt;I start drinking a gross amount of Hamms (the beer-refreshing) and set out on my noble mission.&lt;/p&gt;
&lt;p&gt;Whatever you see in () is what I am blasting on my stereo or doing, for some context. You can safely ignore.&lt;/p&gt;
&lt;p&gt;In all directions, replace “konsumer” with your local username.&lt;/p&gt;
&lt;h2 id=&quot;the-simple-grimy-details&quot;&gt;The (simple) grimy details&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(Combichrist - Tractor) Install &lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot;&gt;Virtualbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Download an &lt;a href=&quot;http://www.ubuntu.com/download/server&quot;&gt;Ubuntu Server Disk Image&lt;/a&gt;: takes half an hour (make a few cocktails!)&lt;/li&gt;
&lt;li&gt;Wait. Drink. Dance around your room/office. (mixes by @Glucosemusic on soundcloud, bumped up for extra glitchy bass-madness)&lt;/li&gt;
&lt;li&gt;Dang! It’s done, finally. Contemplate the nature of data and it’s real-world toll on all of our souls. Bits are tangible, yo.&lt;/li&gt;
&lt;li&gt;(masterful digi-funk hits by DOS.putin on soundcloud) Run VirtualBox (left window open while I danced) make a new virtual-machine. It’s Linux, Ubuntu 64bit. I named mine “LAMPinatro”, which is how I apparently type “LAMPinator” when I am wasted. Make sure it has the recommended RAM (I gave mine 2048MB, because I already love it like the father I never had)&lt;/li&gt;
&lt;li&gt;Right-click on “LAMPinatro” and go to settings. Under “Network” set it to “Bridged”. Under “Shared Folders” add your home directory (on my hackmac: /User/konsumer) and set it to “Auto-mount” (chug a Hamms: the beer refreshing, Hamms)&lt;/li&gt;
&lt;li&gt;Run it. It will ask for a bootdisk, choose the Ubuntu ISO image you downloaded already (mmm, cocktails….)&lt;/li&gt;
&lt;li&gt;(Suicide Commando is so good…) Hit ENTER a bunch, enter your name, etc. I set host name to “lampinator”, typed correctly this time!&lt;/li&gt;
&lt;li&gt;Hit ENTER till it asks if you want to write to disk, choose YES, hit ENTER, like a boss.&lt;/li&gt;
&lt;li&gt;Wait for all the pretty red progress-bars to, like blood, slowly tick away the pointlessness of your life.&lt;/li&gt;
&lt;li&gt;Set updates to “Install security updates automatically”&lt;/li&gt;
&lt;li&gt;In the tasksel menu, choose “OpenSSH Server, and LAMP server”, TAB, ENTER.&lt;/li&gt;
&lt;li&gt;(Velvet Acid Christ) Enter passwords for MySQL&lt;/li&gt;
&lt;li&gt;Hit ENTER till it reboots (check facebook while banging head)&lt;/li&gt;
&lt;li&gt;(Ramstein - Sonne) I like to use my sweet Mac transparent-background terminal (that can easily cut/paste), so I use ssh to setup initial stuff.  login to your vmachine, type &lt;code&gt;ifconfig&lt;/code&gt; to get the IP. In my case it was &lt;code&gt;192.168.1.130&lt;/code&gt;. In terminal ssh: &lt;code&gt;ssh konsumer@192.168.1.130&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(wumpscut - praise your fears) &lt;code&gt;sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install virtualbox-guest-utils phpmyadmin drush&lt;/code&gt;, password, ENTER, wait… autoconfigure for apache.&lt;/li&gt;
&lt;li&gt;(Combichrist - Never Surrender) &lt;code&gt;sudo vim /etc/apache2/sites-available/vhosts&lt;/code&gt;, hit “I” make it like this:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;lang-apache&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;VirtualHost *:80&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;EnableSendFile&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;Off&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;UseCanonicalName&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;off&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;VirtualDocumentRoot&lt;/span&gt; /media/sf_konsumer/Sites/&lt;span class=&quot;number&quot;&gt;%1&lt;/span&gt;/webroot

  &lt;span class=&quot;keyword&quot;&gt;CustomLog&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;/media/sf_konsumer/Sites/logs/access_log&quot;&lt;/span&gt; combined
  &lt;span class=&quot;keyword&quot;&gt;ErrorLog&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;/media/sf_konsumer/Sites/logs/error_log&quot;&lt;/span&gt;

  &lt;span class=&quot;tag&quot;&gt;&amp;lt;Directory &quot;/media/sf_konsumer/Sites/*&quot;&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;keyword&quot;&gt;AllowOverride&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;All&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;common&quot;&gt;Options&lt;/span&gt;&lt;/span&gt; Indexes FollowSymLinks MultiViews
    &lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;common&quot;&gt;RewriteEngine&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;On&lt;/span&gt; 
    &lt;span class=&quot;keyword&quot;&gt;RewriteBase&lt;/span&gt; / 
    &lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;common&quot;&gt;RewriteCond&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;cbracket&quot;&gt;%{REQUEST_FILENAME}&lt;/span&gt; !-f
    &lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;common&quot;&gt;RewriteCond&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;cbracket&quot;&gt;%{REQUEST_FILENAME}&lt;/span&gt; !-d
    &lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;common&quot;&gt;RewriteCond&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;cbracket&quot;&gt;%{REQUEST_URI}&lt;/span&gt; !=/favicon.ico
    &lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;common&quot;&gt;RewriteRule&lt;/span&gt;&lt;/span&gt; ^/media/sf_konsumer/Sites/(.*)$ index.php/&lt;span class=&quot;number&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;sqbracket&quot;&gt; [QSA,L]&lt;/span&gt;

    &lt;span class=&quot;comment&quot;&gt;# Rules to correctly serve gzip compressed CSS and JS files.&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;# Requires both mod_rewrite and mod_headers to be enabled.&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;IfModule mod_headers.c&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;comment&quot;&gt;# Serve gzip compressed CSS files if they exist and the client accepts gzip.&lt;/span&gt;
      &lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;common&quot;&gt;RewriteCond&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;cbracket&quot;&gt;%{HTTP:Accept-encoding}&lt;/span&gt; gzip
      &lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;common&quot;&gt;RewriteCond&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;cbracket&quot;&gt;%{REQUEST_FILENAME}&lt;/span&gt;\.gz -s
      &lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;common&quot;&gt;RewriteRule&lt;/span&gt;&lt;/span&gt; ^(.*)\.css &lt;span class=&quot;number&quot;&gt;$1&lt;/span&gt;\.css\.gz&lt;span class=&quot;sqbracket&quot;&gt; [QSA]&lt;/span&gt;

      &lt;span class=&quot;comment&quot;&gt;# Serve gzip compressed JS files if they exist and the client accepts gzip.&lt;/span&gt;
      &lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;common&quot;&gt;RewriteCond&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;cbracket&quot;&gt;%{HTTP:Accept-encoding}&lt;/span&gt; gzip
      &lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;common&quot;&gt;RewriteCond&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;cbracket&quot;&gt;%{REQUEST_FILENAME}&lt;/span&gt;\.gz -s
      &lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;common&quot;&gt;RewriteRule&lt;/span&gt;&lt;/span&gt; ^(.*)\.js &lt;span class=&quot;number&quot;&gt;$1&lt;/span&gt;\.js\.gz&lt;span class=&quot;sqbracket&quot;&gt; [QSA]&lt;/span&gt;

      &lt;span class=&quot;comment&quot;&gt;# Serve correct content types, and prevent mod_deflate double gzip.&lt;/span&gt;
      &lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;common&quot;&gt;RewriteRule&lt;/span&gt;&lt;/span&gt; \.css\.gz$ -&lt;span class=&quot;sqbracket&quot;&gt; [T=text/css,E=no-gzip:1]&lt;/span&gt;
      &lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;common&quot;&gt;RewriteRule&lt;/span&gt;&lt;/span&gt; \.js\.gz$ -&lt;span class=&quot;sqbracket&quot;&gt; [T=text/javascript,E=no-gzip:1]&lt;/span&gt;

      &lt;span class=&quot;tag&quot;&gt;&amp;lt;FilesMatch &quot;(\.js\.gz|\.css\.gz)$&quot;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;# Serve correct encoding type.&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;common&quot;&gt;Header&lt;/span&gt;&lt;/span&gt; set Content-Encoding gzip
        &lt;span class=&quot;comment&quot;&gt;# Force proxies to cache gzipped &amp;amp; non-gzipped css/js files separately.&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;common&quot;&gt;Header&lt;/span&gt;&lt;/span&gt; append Vary Accept-Encoding
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/FilesMatch&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/IfModule&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;comment&quot;&gt;# Requires mod_expires to be enabled.&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;IfModule mod_expires.c&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;comment&quot;&gt;# Enable expirations.&lt;/span&gt;
      &lt;span class=&quot;keyword&quot;&gt;ExpiresActive&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;On&lt;/span&gt;

      &lt;span class=&quot;comment&quot;&gt;# Cache all files for 2 weeks after access (A).&lt;/span&gt;
      &lt;span class=&quot;keyword&quot;&gt;ExpiresDefault&lt;/span&gt; A1209600

      &lt;span class=&quot;tag&quot;&gt;&amp;lt;FilesMatch \.php$&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;# Do not allow PHP scripts to be cached unless they explicitly send cache&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;# headers themselves. Otherwise all scripts would have to overwrite the&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;# headers set by mod_expires if they want another caching behavior. This may&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;# fail if an error occurs early in the bootstrap process, and it may cause&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;# problems if a non-Drupal PHP file is installed in a subdirectory.&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;ExpiresActive&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;Off&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/FilesMatch&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/IfModule&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;comment&quot;&gt;# PHP 5, Apache 1 and 2.&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;IfModule mod_php5.c&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;keyword&quot;&gt;php_flag&lt;/span&gt; magic_quotes_gpc                 &lt;span class=&quot;literal&quot;&gt;off&lt;/span&gt;
      &lt;span class=&quot;keyword&quot;&gt;php_flag&lt;/span&gt; magic_quotes_sybase              &lt;span class=&quot;literal&quot;&gt;off&lt;/span&gt;
      &lt;span class=&quot;keyword&quot;&gt;php_flag&lt;/span&gt; register_globals                 &lt;span class=&quot;literal&quot;&gt;off&lt;/span&gt;
      &lt;span class=&quot;keyword&quot;&gt;php_flag&lt;/span&gt; session.auto_start               &lt;span class=&quot;literal&quot;&gt;off&lt;/span&gt;
      &lt;span class=&quot;keyword&quot;&gt;php_value&lt;/span&gt; mbstring.http_input             pass
      &lt;span class=&quot;keyword&quot;&gt;php_value&lt;/span&gt; mbstring.http_output            pass
      &lt;span class=&quot;keyword&quot;&gt;php_flag&lt;/span&gt; mbstring.encoding_translation    &lt;span class=&quot;literal&quot;&gt;off&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/IfModule&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt; 

  &lt;span class=&quot;keyword&quot;&gt;Alias&lt;/span&gt; /phpmyadmin/ &lt;span class=&quot;string&quot;&gt;&quot;/usr/share/phpmyadmin/&quot;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;Directory &quot;/usr/share/phpmyadmin/&quot;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;common&quot;&gt;Options&lt;/span&gt;&lt;/span&gt; Indexes MultiViews FollowSymLinks
      &lt;span class=&quot;keyword&quot;&gt;AllowOverride&lt;/span&gt; None
      &lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;common&quot;&gt;Order&lt;/span&gt;&lt;/span&gt; deny,allow
      &lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;common&quot;&gt;Allow&lt;/span&gt;&lt;/span&gt; from &lt;span class=&quot;literal&quot;&gt;all&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt;


  &lt;span class=&quot;keyword&quot;&gt;LogLevel&lt;/span&gt; debug 
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I keep my files in Mac &lt;code&gt;~/Sites/ohcool/webroot&lt;/code&gt;, when I want them to work for &lt;a href=&quot;http://ohcool.local&quot;&gt;http://ohcool.local&lt;/a&gt;. adjust the above if you don’t do that.&lt;/p&gt;
&lt;p&gt;ESC:wq Gosh!, we win!&lt;/p&gt;
&lt;p&gt;Now, do this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;sudo&lt;/span&gt; adduser www-data konsumer
&lt;span class=&quot;built_in&quot;&gt;sudo&lt;/span&gt; adduser www-data vboxsf
&lt;span class=&quot;built_in&quot;&gt;sudo&lt;/span&gt; adduser konsumer www-data
&lt;span class=&quot;built_in&quot;&gt;sudo&lt;/span&gt; adduser konsumer vboxsf&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo a2enmod vhost_alias rewrite &amp;amp;&amp;amp; sudo a2dissite default &amp;amp;&amp;amp; sudo a2ensite vhosts&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(Funker Vogt)  &lt;code&gt;sudo reboot&lt;/code&gt; I am the prince of evil. I don’t work at Dairy Queen.&lt;/li&gt;
&lt;li&gt;Your vbox is pretty much as it will be, for the rest of your pro-life. awesome.&lt;/li&gt;
&lt;li&gt;(Covenant: eins, zwei, drei, FEAR! - Dead stars) On your host system, you can install &lt;a href=&quot;http://www.davesouth.org/stories/how-to-set-up-dnsmasq-on-snow-leopard-for-local-wildcard-domains&quot;&gt;dnsmasq&lt;/a&gt;, but I prefer to just add stuff to /etc/hosts. I added this:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;192.168.1.114 test test.local&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;in SSH (or direct) type &lt;code&gt;mkdir -p /media/sf_konsumer/Sites/test/webroot&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;echo &amp;quot;o cool&amp;quot; &amp;gt; /media/sf_konsumer/Sites/test/webroot/index.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mkdir -p /media/sf_konsumer/Sites/logs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo service apache2 restart&lt;/code&gt; for good measure. check errors. all cool?&lt;/li&gt;
&lt;li&gt;visit &lt;a href=&quot;http://test.local&quot;&gt;http://test.local&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;enjoy what yer new website has to say about you.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, life is better, here’s why:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(Tragic Error - Tanzen) you can drop yer random code-thoughts in ~/Sites/SITE/webroot and profit, like you meant it&lt;/li&gt;
&lt;li&gt;you can use &lt;a href=&quot;http://SITE.local/phpmyadmin&quot;&gt;http://SITE.local/phpmyadmin&lt;/a&gt; to mess with DB&lt;/li&gt;
&lt;li&gt;you can see yer logs in ~/Sites/logs/, for those hard-to-drunken-troubleshoot typa issues.&lt;/li&gt;
&lt;li&gt;you have a lot more time for beer, and it won’t &lt;a href=&quot;http://www.youtube.com/watch?v=BfHpMaAVp-I&quot;&gt;trash your Minecraft saves&lt;/a&gt;, I promise. (Betcha didn’t know I had a sword in my pants…)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, when you wanna test something, fire up your fancy-ass vmachine (takes like 2 secs, fer reals) and hit the site.local. You can SSH in and drush-up your Drupal things, if you want, and be done with that mess (corrugated piece of sh*t…)&lt;/p&gt;
&lt;p&gt;I gotta get some sleep, with all this Hamms I been drinking.&lt;/p&gt;
&lt;p&gt;If you are looking for explanations of the above, here goes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It’s “Bridged” networking, so you can get to the IP of it from your host system. NAT makes it get the Internet, but no access from host. We expect more from our playthings.&lt;/li&gt;
&lt;li&gt;I auto-mount it, and setup virtualbox in client so I can share my files easy.  I point Apache to use ~/Sites as my vhost root. virtualbox take scare of permissions, like it’s a network mount. I add apache user to vboxsf so I can just do stuff how I like, and not be bothered with pesky details, like dumbass permissions or whatevs. It’s local, security is stupid.&lt;/li&gt;
&lt;li&gt;I like vim, use whatever you like, nano is super-simple. Both are pre-installed in Ubuntu Server 12.&lt;/li&gt;
&lt;li&gt;This kinda drunken-ease comes from master-level know-how. Be sure to look into all the technology we talk about here, to get a better idea of how things really work, and how to make it work better. I expect you to return with a tech-battle and avenge this drunken blog post.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nigh-night, ninjas&lt;/p&gt;
</description>
		</item>

</channel>
</rss>